// <auto-generated />
namespace Microsoft.AspNetCore.OData
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class CommonWebApiResources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNetCore.OData.CommonWebApiResources", typeof(CommonWebApiResources).GetTypeInfo().Assembly);

        /// <summary>
        /// Value must be greater than or equal to {0}.
        /// </summary>
        internal static string ArgumentMustBeGreaterThanOrEqualTo
        {
            get { return GetString("ArgumentMustBeGreaterThanOrEqualTo"); }
        }

        /// <summary>
        /// Value must be greater than or equal to {0}.
        /// </summary>
        internal static string FormatArgumentMustBeGreaterThanOrEqualTo(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentMustBeGreaterThanOrEqualTo"), p0);
        }

        /// <summary>
        /// The argument '{0}' is null or empty.
        /// </summary>
        internal static string ArgumentNullOrEmpty
        {
            get { return GetString("ArgumentNullOrEmpty"); }
        }

        /// <summary>
        /// The argument '{0}' is null or empty.
        /// </summary>
        internal static string FormatArgumentNullOrEmpty(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentNullOrEmpty"), p0);
        }

        /// <summary>
        /// The value of argument '{0}' ({1}) is invalid for Enum type '{2}'.
        /// </summary>
        internal static string InvalidEnumArgument
        {
            get { return GetString("InvalidEnumArgument"); }
        }

        /// <summary>
        /// The value of argument '{0}' ({1}) is invalid for Enum type '{2}'.
        /// </summary>
        internal static string FormatInvalidEnumArgument(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidEnumArgument"), p0, p1, p2);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
