using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;
using Microsoft.OData.Edm;
using Microsoft.OData.Edm.Library;
using System.Web.OData.Formatter;

namespace System.Web.OData.OData.Query.Expressions
{
    internal class TypeProvider
    {
        public static Type GetResultType(TypeDefinition definition)
        {
            // Do not have properties, just return base class
            if (!definition.Properties.Any())
            {
                return typeof(GrpWrapper);
            }

            TypeBuilder tb = GetTypeBuilder(definition.Name);
            ConstructorBuilder constructor = tb.DefineDefaultConstructor(MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.RTSpecialName);

            foreach (var field in definition.Properties)
            {
                CreateProperty(tb, field.Key, field.Value);
            }

            return tb.CreateType();
        }

        private static TypeBuilder GetTypeBuilder(string typeSignature)
        {
            var an = new AssemblyName(typeSignature);
            AssemblyBuilder assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(an, AssemblyBuilderAccess.RunAndCollect);
            ModuleBuilder moduleBuilder = assemblyBuilder.DefineDynamicModule("MainModule");
            TypeBuilder tb = moduleBuilder.DefineType(typeSignature
                                , TypeAttributes.Public |
                                TypeAttributes.Class |
                                TypeAttributes.AutoClass |
                                TypeAttributes.AnsiClass |
                                TypeAttributes.BeforeFieldInit |
                                TypeAttributes.AutoLayout
                                , typeof(GrpWrapper));
            return tb;
        }

        private static void CreateProperty(TypeBuilder tb, string propertyName, Type propertyType)
        {
            PropertyBuilder propertyBuilder = tb.DefineProperty(propertyName, PropertyAttributes.HasDefault, propertyType, null);

            // Property get method
            // get {
            //  return this.GetPropertyValue("propertyName");
            // }
            MethodBuilder getPropMthdBldr = tb.DefineMethod("get_" + propertyName, MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig, propertyType, Type.EmptyTypes);
            ILGenerator getIl = getPropMthdBldr.GetILGenerator();

            getIl.Emit(OpCodes.Ldarg_0);
            getIl.Emit(OpCodes.Ldstr, propertyName);
            getIl.Emit(OpCodes.Callvirt, typeof(GrpWrapper).GetMethod("GetPropertyValue"));
            if (propertyType.IsValueType)
            {
                getIl.Emit(OpCodes.Unbox_Any, propertyType);
            }
            else
            {
                getIl.Emit(OpCodes.Castclass, propertyType);
            }
            getIl.Emit(OpCodes.Ret);


            // Property get method
            // set {
            //  return this.SetPropertyValue("propertyName", value);
            // }

            MethodBuilder setPropMthdBldr =
                tb.DefineMethod("set_" + propertyName,
                  MethodAttributes.Public |
                  MethodAttributes.SpecialName |
                  MethodAttributes.HideBySig,
                  null, new[] { propertyType });

            ILGenerator setIl = setPropMthdBldr.GetILGenerator();
            setIl.Emit(OpCodes.Ldarg_0);
            setIl.Emit(OpCodes.Ldstr, propertyName);
            setIl.Emit(OpCodes.Ldarg_1);
            if (propertyType.IsValueType)
            {
                setIl.Emit(OpCodes.Box, propertyType);
            }
            setIl.Emit(OpCodes.Callvirt, typeof(GrpWrapper).GetMethod("SetPropertyValue"));
            setIl.Emit(OpCodes.Ret);

            propertyBuilder.SetGetMethod(getPropMthdBldr);
            propertyBuilder.SetSetMethod(setPropMthdBldr);
        }
    }

    internal class TypeDefinition
    {
        public TypeDefinition()
        {
            this.Name = "Dynamic_" + Guid.NewGuid().ToString();
            this.Properties = new Dictionary<string, Type>();
        }

        public string Name { get; private set; }

        public IDictionary<string, Type> Properties
        {
            get; set;
        }

        public TypeDefinition Clone()
        {
            var result = new TypeDefinition();
            result.Properties = this.Properties.ToList().ToDictionary(kvp=> kvp.Key, kvp => kvp.Value);
            return result;
        }
    }

    /// <summary>
    /// Base class for autogenerated classes
    /// </summary>
    public class GrpWrapper : IEdmGeneratedObject
    {
        private readonly Dictionary<string, object> _values = new Dictionary<string, object>();

        /// <summary>
        /// Gets Type.
        /// </summary>
        /// <returns></returns>
        public IEdmTypeReference GetEdmType()
        {
            var type = new EdmEntityType(string.Empty, "GroupingWrapper", baseType: null, isAbstract: false, isOpen: true);
            foreach (var prop in this._values)
            {
                type.AddStructuralProperty(prop.Key, EdmPrimitiveTypeKind.String);
            }

            return type.ToEdmTypeReference(true);
        }


        /// <summary>
        /// Get property value
        /// </summary>
        /// <param name="propertyName"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public bool TryGetPropertyValue(string propertyName, out object value)
        {
            if( this._values.TryGetValue(propertyName, out value))
            {
                // TODO: Refactor ApplyClause by OData team spec and infer type sduring parsing
                if (value != null)
                {
                    value = value.ToString();
                }
                return true;
            }

            value = null;
            return false;
        }

        /// <summary>
        /// Get property value.
        /// </summary>
        /// <param name="propertyName"></param>
        /// <returns></returns>
        public object GetPropertyValue(string propertyName)
        {
            return this._values[propertyName];
        }

        /// <summary>
        /// Set property value
        /// </summary>
        /// <param name="propertyName"></param>
        /// <param name="value"></param>
        public void SetPropertyValue(string propertyName, object value)
        {
            this._values[propertyName] = value;
        }

        /// <summary>
        /// Compares to wrappers
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
        {
            var compareWith = obj as GrpWrapper;
            if (compareWith == null)
            {
                return false;
            }

            var dictionary1 = this._values;
            var dictionary2 = compareWith._values;
            return dictionary1.Count() == dictionary2.Count() && !dictionary1.Except(dictionary2).Any();
        }


        /// <summary>
        /// Gets hashcode.
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
        {
            long hash = 1870403278L; //Arbitrary number from Anonymous Type GetHashCode implementation
            foreach (var v in this._values.Values)
            {
                hash = hash * -1521134295L + v.GetHashCode();
            }

            return (int)hash;
        }
    }
}
