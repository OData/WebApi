//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generation date: 7/29/2014 2:16:23 PM
namespace Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client
{
    /// <summary>
    /// There are no comments for Container in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("Container")]
    public partial class Container : global::Microsoft.OData.Client.DataServiceContext
    {
        /// <summary>
        /// Initialize a new Container object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        public Container(global::System.Uri serviceRoot) : 
                base(serviceRoot, global::Microsoft.OData.Client.ODataProtocolVersion.V4)
        {
            this.ResolveName = new global::System.Func<global::System.Type, string>(this.ResolveNameFromType);
            this.ResolveType = new global::System.Func<string, global::System.Type>(this.ResolveTypeFromName);
            this.OnContextCreated();
            this.Format.LoadServiceModel = GeneratedEdmModel.GetInstance;
            this.Format.UseJson();
        }
        partial void OnContextCreated();
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        protected global::System.Type ResolveTypeFromName(string typeName)
        {
            global::System.Type resolvedType = this.DefaultResolveType(typeName, "Microsoft.Test.E2E.AspNet.OData.OpenType", "Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client");
            if ((resolvedType != null))
            {
                return resolvedType;
            }
            return null;
        }
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        protected string ResolveNameFromType(global::System.Type clientType)
        {
            global::Microsoft.OData.Client.OriginalNameAttribute originalNameAttribute = (global::Microsoft.OData.Client.OriginalNameAttribute)global::System.Linq.Enumerable.SingleOrDefault(global::Microsoft.OData.Client.Utility.GetCustomAttributes(clientType, typeof(global::Microsoft.OData.Client.OriginalNameAttribute), true));
            if (clientType.Namespace.Equals("Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client", global::System.StringComparison.Ordinal))
            {
                if (originalNameAttribute != null)
                {
                    return string.Concat("Microsoft.Test.E2E.AspNet.OData.OpenType.", originalNameAttribute.OriginalName);
                }
                return string.Concat("Microsoft.Test.E2E.AspNet.OData.OpenType.", clientType.Name);
            }
            if (originalNameAttribute != null)
            {
                return clientType.Namespace + "." + originalNameAttribute.OriginalName;
            }
            return clientType.FullName;
        }
        /// <summary>
        /// There are no comments for Employees in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        public global::Microsoft.OData.Client.DataServiceQuery<Employee> Employees
        {
            get
            {
                if ((this._Employees == null))
                {
                    this._Employees = base.CreateQuery<Employee>("Employees");
                }
                return this._Employees;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private global::Microsoft.OData.Client.DataServiceQuery<Employee> _Employees;
        /// <summary>
        /// There are no comments for Accounts in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        public global::Microsoft.OData.Client.DataServiceQuery<Account> Accounts
        {
            get
            {
                if ((this._Accounts == null))
                {
                    this._Accounts = base.CreateQuery<Account>("Accounts");
                }
                return this._Accounts;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private global::Microsoft.OData.Client.DataServiceQuery<Account> _Accounts;
        /// <summary>
        /// There are no comments for Employees in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        public void AddToEmployees(Employee employee)
        {
            base.AddObject("Employees", employee);
        }
        /// <summary>
        /// There are no comments for Accounts in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        public void AddToAccounts(Account account)
        {
            base.AddObject("Accounts", account);
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private abstract class GeneratedEdmModel
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
            private static global::Microsoft.OData.Edm.IEdmModel ParsedModel = LoadModelFromString();
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
            private const string Edmx = @"<edmx:Edmx Version=""4.0"" xmlns:edmx=""http://docs.oasis-open.org/odata/ns/edmx"">
  <edmx:Runtime>
    <edmx:ConceptualModels>
      <Schema Namespace=""Microsoft.Test.E2E.AspNet.OData.OpenType"" xmlns=""http://docs.oasis-open.org/odata/ns/edm"">
        <EntityType Name=""Employee"">
          <Key>
            <PropertyRef Name=""Id"" />
          </Key>
          <Property Name=""Id"" Type=""Edm.Int32"" Nullable=""false"" />
          <Property Name=""Name"" Type=""Edm.String"" />
          <NavigationProperty Name=""Account"" Type=""Microsoft.Test.E2E.AspNet.OData.OpenType.Account"" />
        </EntityType>
        <EntityType Name=""Account"" OpenType=""true"">
          <Key>
            <PropertyRef Name=""Id"" />
          </Key>
          <Property Name=""Id"" Type=""Edm.Int32"" Nullable=""false"" />
          <Property Name=""Name"" Type=""Edm.String"" />
          <Property Name=""AccountInfo"" Type=""Microsoft.Test.E2E.AspNet.OData.OpenType.AccountInfo"" />
          <Property Name=""Address"" Type=""Microsoft.Test.E2E.AspNet.OData.OpenType.Address"" />
          <Property Name=""Tags"" Type=""Microsoft.Test.E2E.AspNet.OData.OpenType.Tags"" />
        </EntityType>
        <ComplexType Name=""Address"" OpenType=""true"">
          <Property Name=""City"" Type=""Edm.String"" />
          <Property Name=""Street"" Type=""Edm.String"" />
        </ComplexType>
        <ComplexType Name=""AccountInfo"" OpenType=""true"">
          <Property Name=""NickName"" Type=""Edm.String"" />
        </ComplexType>
        <ComplexType Name=""Tags"" OpenType=""true"" />
        <EntityType Name=""PremiumAccount"" BaseType=""Microsoft.Test.E2E.AspNet.OData.OpenType.Account"" OpenType=""true"">
          <Property Name=""Since"" Type=""Edm.DateTimeOffset"" Nullable=""false"" />
        </EntityType>
        <EntityType Name=""Manager"" BaseType=""Microsoft.Test.E2E.AspNet.OData.OpenType.Employee"" OpenType=""true"">
          <Property Name=""Heads"" Type=""Edm.Int32"" Nullable=""false"" />
        </EntityType>
        <EnumType Name=""Gender"">
          <Member Name=""Male"" Value=""1"" />
          <Member Name=""Female"" Value=""2"" />
        </EnumType>
        <Function Name=""GetAddressFunction"" IsBound=""true"">
          <Parameter Name=""bindingParameter"" Type=""Microsoft.Test.E2E.AspNet.OData.OpenType.Account"" />
          <ReturnType Type=""Microsoft.Test.E2E.AspNet.OData.OpenType.Address"" />
        </Function>
        <Function Name=""GetShipAddresses"" IsBound=""true"">
          <Parameter Name=""bindingParameter"" Type=""Microsoft.Test.E2E.AspNet.OData.OpenType.Account"" />
          <ReturnType Type=""Collection(Microsoft.Test.E2E.AspNet.OData.OpenType.Address)"" />
        </Function>
        <Action Name=""IncreaseAgeAction"" IsBound=""true"">
          <Parameter Name=""bindingParameter"" Type=""Microsoft.Test.E2E.AspNet.OData.OpenType.Account"" />
          <ReturnType Type=""Microsoft.Test.E2E.AspNet.OData.OpenType.AccountInfo"" />
        </Action>
        <Action Name=""AddShipAddress"" IsBound=""true"">
          <Parameter Name=""bindingParameter"" Type=""Microsoft.Test.E2E.AspNet.OData.OpenType.Account"" />
          <Parameter Name=""address"" Type=""Microsoft.Test.E2E.AspNet.OData.OpenType.Address"" />
          <ReturnType Type=""Edm.Int32"" Nullable=""false"" />
        </Action>
        <Action Name=""ResetDataSource"" />
        <Action Name=""UpdateAddressAction"">
          <Parameter Name=""Address"" Type=""Microsoft.Test.E2E.AspNet.OData.OpenType.Address"" />
          <Parameter Name=""ID"" Type=""Edm.Int32"" Nullable=""false"" />
          <ReturnType Type=""Microsoft.Test.E2E.AspNet.OData.OpenType.Address"" />
        </Action>
        <EntityContainer Name=""Container"">
          <EntitySet Name=""Employees"" EntityType=""Microsoft.Test.E2E.AspNet.OData.OpenType.Employee"">
            <NavigationPropertyBinding Path=""Account"" Target=""Accounts"" />
          </EntitySet>
          <EntitySet Name=""Accounts"" EntityType=""Microsoft.Test.E2E.AspNet.OData.OpenType.Account"" />
          <ActionImport Name=""ResetDataSource"" Action=""Microsoft.Test.E2E.AspNet.OData.OpenType.ResetDataSource"" />
          <ActionImport Name=""UpdateAddressAction"" Action=""Microsoft.Test.E2E.AspNet.OData.OpenType.UpdateAddressAction"" />
        </EntityContainer>
      </Schema>
    </edmx:ConceptualModels>
  </edmx:Runtime>
</edmx:Edmx>";
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
            public static global::Microsoft.OData.Edm.IEdmModel GetInstance()
            {
                return ParsedModel;
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
            private static global::Microsoft.OData.Edm.IEdmModel LoadModelFromString()
            {
                global::System.Xml.XmlReader reader = CreateXmlReader(Edmx);
                try
                {
                    return global::Microsoft.OData.Edm.Csdl.CsdlReader.Parse(reader);
                }
                finally
                {
                    ((global::System.IDisposable)(reader)).Dispose();
                }
            }
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
            private static global::System.Xml.XmlReader CreateXmlReader(string edmxToParse)
            {
                return global::System.Xml.XmlReader.Create(new global::System.IO.StringReader(edmxToParse));
            }
        }
        /// <summary>
        /// There are no comments for ResetDataSource in the schema.
        /// </summary>
        public global::Microsoft.OData.Client.DataServiceActionQuery ResetDataSource()
        {
            return new global::Microsoft.OData.Client.DataServiceActionQuery(this, this.BaseUri.OriginalString.Trim('/') + "/ResetDataSource");
        }
        /// <summary>
        /// There are no comments for UpdateAddressAction in the schema.
        /// </summary>
        public global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address> UpdateAddressAction(global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address Address, int ID)
        {
            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address>(this, this.BaseUri.OriginalString.Trim('/') + "/UpdateAddressAction", new global::Microsoft.OData.Client.BodyOperationParameter("Address", Address),
                    new global::Microsoft.OData.Client.BodyOperationParameter("ID", ID));
        }
    }
    /// <summary>
    /// There are no comments for EmployeeSingle in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("EmployeeSingle")]
    public partial class EmployeeSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<Employee>
    {
        /// <summary>
        /// Initialize a new EmployeeSingle object.
        /// </summary>
        public EmployeeSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) {}

        /// <summary>
        /// Initialize a new EmployeeSingle object.
        /// </summary>
        public EmployeeSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) {}
        /// <summary>
        /// There are no comments for Account in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        public global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.AccountSingle Account
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._Account == null))
                {
                    this._Account = new global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.AccountSingle(this.Context, GetPath("Account"));
                }
                return this._Account;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.AccountSingle _Account;
    }
    /// <summary>
    /// There are no comments for Employee in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("Id")]
    [global::Microsoft.OData.Client.EntitySet("Employees")]
    [global::Microsoft.OData.Client.OriginalNameAttribute("Employee")]
    public partial class Employee : global::Microsoft.OData.Client.BaseEntityType, global::System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// Create a new Employee object.
        /// </summary>
        /// <param name="ID">Initial value of Id.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        public static Employee CreateEmployee(int ID)
        {
            Employee employee = new Employee();
            employee.Id = ID;
            return employee;
        }
        /// <summary>
        /// There are no comments for Property Id in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("Id")]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                this.OnIdChanging(value);
                this._Id = value;
                this.OnIdChanged();
                this.OnPropertyChanged("Id");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private int _Id;
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        /// <summary>
        /// There are no comments for Property Name in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("Name")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                this.OnNameChanging(value);
                this._Name = value;
                this.OnNameChanged();
                this.OnPropertyChanged("Name");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private string _Name;
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        /// <summary>
        /// There are no comments for Property Account in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("Account")]
        public global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Account Account
        {
            get
            {
                return this._Account;
            }
            set
            {
                this.OnAccountChanging(value);
                this._Account = value;
                this.OnAccountChanged();
                this.OnPropertyChanged("Account");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Account _Account;
        partial void OnAccountChanging(global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Account value);
        partial void OnAccountChanged();
        /// <summary>
        /// This event is raised when the value of the property is changed
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        /// <summary>
        /// The value of the property is changed
        /// </summary>
        /// <param name="property">property name</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
    }
    /// <summary>
    /// There are no comments for AccountSingle in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("AccountSingle")]
    public partial class AccountSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<Account>
    {
        /// <summary>
        /// Initialize a new AccountSingle object.
        /// </summary>
        public AccountSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) {}

        /// <summary>
        /// Initialize a new AccountSingle object.
        /// </summary>
        public AccountSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) {}
    }
    /// <summary>
    /// There are no comments for Account in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("Id")]
    [global::Microsoft.OData.Client.EntitySet("Accounts")]
    [global::Microsoft.OData.Client.OriginalNameAttribute("Account")]
    public partial class Account : global::Microsoft.OData.Client.BaseEntityType, global::System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// Create a new Account object.
        /// </summary>
        /// <param name="ID">Initial value of Id.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        public static Account CreateAccount(int ID)
        {
            Account account = new Account();
            account.Id = ID;
            return account;
        }
        /// <summary>
        /// There are no comments for Property Id in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("Id")]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                this.OnIdChanging(value);
                this._Id = value;
                this.OnIdChanged();
                this.OnPropertyChanged("Id");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private int _Id;
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        /// <summary>
        /// There are no comments for Property Name in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("Name")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                this.OnNameChanging(value);
                this._Name = value;
                this.OnNameChanged();
                this.OnPropertyChanged("Name");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private string _Name;
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        /// <summary>
        /// There are no comments for Property AccountInfo in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("AccountInfo")]
        public global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.AccountInfo AccountInfo
        {
            get
            {
                return this._AccountInfo;
            }
            set
            {
                this.OnAccountInfoChanging(value);
                this._AccountInfo = value;
                this.OnAccountInfoChanged();
                this.OnPropertyChanged("AccountInfo");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.AccountInfo _AccountInfo;
        partial void OnAccountInfoChanging(global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.AccountInfo value);
        partial void OnAccountInfoChanged();
        /// <summary>
        /// There are no comments for Property Address in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("Address")]
        public global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                this.OnAddressChanging(value);
                this._Address = value;
                this.OnAddressChanged();
                this.OnPropertyChanged("Address");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address _Address;
        partial void OnAddressChanging(global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address value);
        partial void OnAddressChanged();
        /// <summary>
        /// There are no comments for Property Tags in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("Tags")]
        public global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Tags Tags
        {
            get
            {
                return this._Tags;
            }
            set
            {
                this.OnTagsChanging(value);
                this._Tags = value;
                this.OnTagsChanged();
                this.OnPropertyChanged("Tags");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Tags _Tags;
        partial void OnTagsChanging(global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Tags value);
        partial void OnTagsChanged();
        /// <summary>
        /// This event is raised when the value of the property is changed
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        /// <summary>
        /// The value of the property is changed
        /// </summary>
        /// <param name="property">property name</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
        /// <summary>
        /// There are no comments for GetAddressFunction in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("GetAddressFunction")]
        public global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address> GetAddressFunction()
        {
            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(this.Context);
            global::System.Uri requestUri;
            Context.TryGetUri(this, out requestUri);
            return new global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address>(this.Context, string.Join("/", global::System.Linq.Enumerable.Select(global::System.Linq.Enumerable.Skip(requestUri.Segments, this.Context.BaseUri.Segments.Length), s => s.Trim('/'))) + "/Microsoft.Test.E2E.AspNet.OData.OpenType.GetAddressFunction" + parameterString, false);
        }
        /// <summary>
        /// There are no comments for GetShipAddresses in the schema.
        /// </summary>
        [global::Microsoft.OData.Client.OriginalNameAttribute("GetShipAddresses")]
        public global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address> GetShipAddresses()
        {
            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(this.Context);
            global::System.Uri requestUri;
            Context.TryGetUri(this, out requestUri);
            return this.Context.CreateQuery<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address>(string.Join("/", global::System.Linq.Enumerable.Select(global::System.Linq.Enumerable.Skip(requestUri.Segments, this.Context.BaseUri.Segments.Length), s => s.Trim('/'))) + "/Microsoft.Test.E2E.AspNet.OData.OpenType.GetShipAddresses" + parameterString, false);
        }
        /// <summary>
        /// There are no comments for IncreaseAgeAction in the schema.
        /// </summary>
        public global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.AccountInfo> IncreaseAgeAction()
        {
            global::Microsoft.OData.Client.EntityDescriptor resource = Context.EntityTracker.TryGetEntityDescriptor(this);
            if (resource == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.AccountInfo>(this.Context, resource.EditLink.OriginalString.Trim('/') + "/Microsoft.Test.E2E.AspNet.OData.OpenType.IncreaseAgeAction");
        }
        /// <summary>
        /// There are no comments for AddShipAddress in the schema.
        /// </summary>
        public global::Microsoft.OData.Client.DataServiceActionQuerySingle<int> AddShipAddress(global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address address)
        {
            global::Microsoft.OData.Client.EntityDescriptor resource = Context.EntityTracker.TryGetEntityDescriptor(this);
            if (resource == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<int>(this.Context, resource.EditLink.OriginalString.Trim('/') + "/Microsoft.Test.E2E.AspNet.OData.OpenType.AddShipAddress", new global::Microsoft.OData.Client.BodyOperationParameter("address", address));
        }
    }
    /// <summary>
    /// There are no comments for Address in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("Address")]
    public partial class Address : global::System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// There are no comments for Property City in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("City")]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                this.OnCityChanging(value);
                this._City = value;
                this.OnCityChanged();
                this.OnPropertyChanged("City");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private string _City;
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        /// <summary>
        /// There are no comments for Property Street in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("Street")]
        public string Street
        {
            get
            {
                return this._Street;
            }
            set
            {
                this.OnStreetChanging(value);
                this._Street = value;
                this.OnStreetChanged();
                this.OnPropertyChanged("Street");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private string _Street;
        partial void OnStreetChanging(string value);
        partial void OnStreetChanged();
        /// <summary>
        /// This event is raised when the value of the property is changed
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        /// <summary>
        /// The value of the property is changed
        /// </summary>
        /// <param name="property">property name</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
    }
    /// <summary>
    /// There are no comments for AccountInfo in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("AccountInfo")]
    public partial class AccountInfo : global::System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// There are no comments for Property NickName in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("NickName")]
        public string NickName
        {
            get
            {
                return this._NickName;
            }
            set
            {
                this.OnNickNameChanging(value);
                this._NickName = value;
                this.OnNickNameChanged();
                this.OnPropertyChanged("NickName");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private string _NickName;
        partial void OnNickNameChanging(string value);
        partial void OnNickNameChanged();
        /// <summary>
        /// This event is raised when the value of the property is changed
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        /// <summary>
        /// The value of the property is changed
        /// </summary>
        /// <param name="property">property name</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
    }
    /// <summary>
    /// There are no comments for Tags in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("Tags")]
    public partial class Tags : global::System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// This event is raised when the value of the property is changed
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        /// <summary>
        /// The value of the property is changed
        /// </summary>
        /// <param name="property">property name</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
    }
    /// <summary>
    /// There are no comments for PremiumAccountSingle in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("PremiumAccountSingle")]
    public partial class PremiumAccountSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<PremiumAccount>
    {
        /// <summary>
        /// Initialize a new PremiumAccountSingle object.
        /// </summary>
        public PremiumAccountSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) {}

        /// <summary>
        /// Initialize a new PremiumAccountSingle object.
        /// </summary>
        public PremiumAccountSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) {}
    }
    /// <summary>
    /// There are no comments for PremiumAccount in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("Id")]
    [global::Microsoft.OData.Client.OriginalNameAttribute("PremiumAccount")]
    public partial class PremiumAccount : Account
    {
        /// <summary>
        /// Create a new PremiumAccount object.
        /// </summary>
        /// <param name="ID">Initial value of Id.</param>
        /// <param name="since">Initial value of Since.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        public static PremiumAccount CreatePremiumAccount(int ID, global::System.DateTimeOffset since)
        {
            PremiumAccount premiumAccount = new PremiumAccount();
            premiumAccount.Id = ID;
            premiumAccount.Since = since;
            return premiumAccount;
        }
        /// <summary>
        /// There are no comments for Property Since in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("Since")]
        public global::System.DateTimeOffset Since
        {
            get
            {
                return this._Since;
            }
            set
            {
                this.OnSinceChanging(value);
                this._Since = value;
                this.OnSinceChanged();
                this.OnPropertyChanged("Since");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private global::System.DateTimeOffset _Since;
        partial void OnSinceChanging(global::System.DateTimeOffset value);
        partial void OnSinceChanged();
    }
    /// <summary>
    /// There are no comments for ManagerSingle in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("ManagerSingle")]
    public partial class ManagerSingle : global::Microsoft.OData.Client.DataServiceQuerySingle<Manager>
    {
        /// <summary>
        /// Initialize a new ManagerSingle object.
        /// </summary>
        public ManagerSingle(global::Microsoft.OData.Client.DataServiceContext context, string path)
            : base(context, path) {}

        /// <summary>
        /// Initialize a new ManagerSingle object.
        /// </summary>
        public ManagerSingle(global::Microsoft.OData.Client.DataServiceContext context, string path, bool isComposable)
            : base(context, path, isComposable) {}
        /// <summary>
        /// There are no comments for Account in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        public global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.AccountSingle Account
        {
            get
            {
                if (!this.IsComposable)
                {
                    throw new global::System.NotSupportedException("The previous function is not composable.");
                }
                if ((this._Account == null))
                {
                    this._Account = new global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.AccountSingle(this.Context, GetPath("Account"));
                }
                return this._Account;
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.AccountSingle _Account;
    }
    /// <summary>
    /// There are no comments for Manager in the schema.
    /// </summary>
    /// <KeyProperties>
    /// Id
    /// </KeyProperties>
    [global::Microsoft.OData.Client.Key("Id")]
    [global::Microsoft.OData.Client.OriginalNameAttribute("Manager")]
    public partial class Manager : Employee
    {
        /// <summary>
        /// Create a new Manager object.
        /// </summary>
        /// <param name="ID">Initial value of Id.</param>
        /// <param name="heads">Initial value of Heads.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        public static Manager CreateManager(int ID, int heads)
        {
            Manager manager = new Manager();
            manager.Id = ID;
            manager.Heads = heads;
            return manager;
        }
        /// <summary>
        /// There are no comments for Property Heads in the schema.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        [global::Microsoft.OData.Client.OriginalNameAttribute("Heads")]
        public int Heads
        {
            get
            {
                return this._Heads;
            }
            set
            {
                this.OnHeadsChanging(value);
                this._Heads = value;
                this.OnHeadsChanged();
                this.OnPropertyChanged("Heads");
            }
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.OData.Client.Design.T4", "2.0.0")]
        private int _Heads;
        partial void OnHeadsChanging(int value);
        partial void OnHeadsChanged();
    }
    /// <summary>
    /// There are no comments for Gender in the schema.
    /// </summary>
    [global::Microsoft.OData.Client.OriginalNameAttribute("Gender")]
    public enum Gender
    {
        [global::Microsoft.OData.Client.OriginalNameAttribute("Male")]
        Male = 1,
        [global::Microsoft.OData.Client.OriginalNameAttribute("Female")]
        Female = 2
    }
    /// <summary>
    /// Class containing all extension methods
    /// </summary>
    public static class ExtensionMethods
    {
        /// <summary>
        /// Get an entity of type global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Employee as global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.EmployeeSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.EmployeeSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Employee> source, global::System.Collections.Generic.Dictionary<string, object> keys)
        {
            return new global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.EmployeeSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Account as global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.AccountSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.AccountSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Account> source, global::System.Collections.Generic.Dictionary<string, object> keys)
        {
            return new global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.AccountSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.PremiumAccount as global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.PremiumAccountSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.PremiumAccountSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.PremiumAccount> source, global::System.Collections.Generic.Dictionary<string, object> keys)
        {
            return new global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.PremiumAccountSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Cast an entity of type global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Account to its derived type global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.PremiumAccount
        /// </summary>
        /// <param name="source">source entity</param>
        public static global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.PremiumAccountSingle CastToPremiumAccount(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Account> source)
        {
            global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.PremiumAccount> query = source.CastTo<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.PremiumAccount>();
            return new global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.PremiumAccountSingle(source.Context, query.GetPath(null));
        }
        /// <summary>
        /// Get an entity of type global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Manager as global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.ManagerSingle specified by key from an entity set
        /// </summary>
        /// <param name="source">source entity set</param>
        /// <param name="keys">dictionary with the names and values of keys</param>
        public static global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.ManagerSingle ByKey(this global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Manager> source, global::System.Collections.Generic.Dictionary<string, object> keys)
        {
            return new global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.ManagerSingle(source.Context, source.GetKeyPath(global::Microsoft.OData.Client.Serializer.GetKeyString(source.Context, keys)));
        }
        /// <summary>
        /// Cast an entity of type global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Employee to its derived type global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Manager
        /// </summary>
        /// <param name="source">source entity</param>
        public static global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.ManagerSingle CastToManager(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Employee> source)
        {
            global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Manager> query = source.CastTo<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Manager>();
            return new global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.ManagerSingle(source.Context, query.GetPath(null));
        }
        /// <summary>
        /// There are no comments for GetAddressFunction in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address> GetAddressFunction(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Account> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(source.Context);
            return new global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address>(source.Context, source.GetPath("Microsoft.Test.E2E.AspNet.OData.OpenType.GetAddressFunction" + parameterString), false);
        }
        /// <summary>
        /// There are no comments for GetAddressFunction in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address> GetAddressFunction(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.PremiumAccount> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(source.Context);
            return new global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address>(source.Context, source.GetPath("Microsoft.Test.E2E.AspNet.OData.OpenType.GetAddressFunction" + parameterString), false);
        }
        /// <summary>
        /// There are no comments for GetShipAddresses in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address> GetShipAddresses(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Account> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(source.Context);
            return source.Context.CreateQuery<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address>(source.GetPath("Microsoft.Test.E2E.AspNet.OData.OpenType.GetShipAddresses" + parameterString), false);
        }
        /// <summary>
        /// There are no comments for GetShipAddresses in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceQuery<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address> GetShipAddresses(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.PremiumAccount> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            string parameterString = global::Microsoft.OData.Client.Serializer.GetParameterString(source.Context);
            return source.Context.CreateQuery<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address>(source.GetPath("Microsoft.Test.E2E.AspNet.OData.OpenType.GetShipAddresses" + parameterString), false);
        }
        /// <summary>
        /// There are no comments for IncreaseAgeAction in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.AccountInfo> IncreaseAgeAction(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Account> source)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.AccountInfo>(source.Context, source.AppendRequestUri("Microsoft.Test.E2E.AspNet.OData.OpenType.IncreaseAgeAction"));
        }
        /// <summary>
        /// There are no comments for AddShipAddress in the schema.
        /// </summary>
        public static global::Microsoft.OData.Client.DataServiceActionQuerySingle<int> AddShipAddress(this global::Microsoft.OData.Client.DataServiceQuerySingle<global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Account> source, global::Microsoft.Test.E2E.AspNet.OData.OpenType.Typed.Client.Address address)
        {
            if (!source.IsComposable)
            {
                throw new global::System.NotSupportedException("The previous function is not composable.");
            }

            return new global::Microsoft.OData.Client.DataServiceActionQuerySingle<int>(source.Context, source.AppendRequestUri("Microsoft.Test.E2E.AspNet.OData.OpenType.AddShipAddress"), new global::Microsoft.OData.Client.BodyOperationParameter("address", address));
        }
    }
}
