<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This task does not support concurrent execution from multiple project files. Its use is only appropriate when
        NuGet.exe is not in use. -->
  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFileName ParameterType="System.String" Required="true" />
      <MinimumVersion ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.Diagnostics" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
                Version minimumRequiredVersion;
                
                if (!Version.TryParse(MinimumVersion, out minimumRequiredVersion))
                {
                    Log.LogError("MinimumVersion '{0}' is not a valid Version.", MinimumVersion);
                }
        
                try
                {
                    OutputFileName = Path.GetFullPath(OutputFileName);
                    
                    if (File.Exists(OutputFileName))
                    {
                        // If NuGet.exe exists but is less than the minimum required version, delete it so that the
                        // latest version will be downloaded.
                        FileVersionInfo versionInfo = FileVersionInfo.GetVersionInfo(OutputFileName);
                        
                        string toParse;
                        
                        if (versionInfo != null && versionInfo.ProductVersion != null)
                        {
                            toParse = versionInfo.ProductVersion;
                        }
                        else
                        {
                            toParse = null;
                        }
                        
                        Version current;
                        Version parsed;
                        
                        if (toParse != null && Version.TryParse(toParse, out parsed))
                        {
                            current = parsed;
                        }
                        else
                        {
                            // Treat a missing or invalid version like V0.0 (which will trigger a delete and download).
                            current = new Version(0, 0);
                        }
                        
                        if (current < minimumRequiredVersion)
                        {
                            File.Delete(OutputFileName);
                        }
                    }
                    
                    if (!File.Exists(OutputFileName))
                    {
                        Log.LogMessage("Downloading latest version of NuGet.exe...");
                        WebClient webClient = new WebClient();
                        webClient.DownloadFile("https://nuget.org/nuget.exe", OutputFileName);
                    }

                    return true;
                }
                catch (Exception ex)
                {
                    Log.LogErrorFromException(ex);
                    return false;
                }
            ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="RegexReplace" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Find ParameterType="System.String" Required="true" />
      <Replace ParameterType="System.String" Required="true" />
      <WarnOnNoMatch ParameterType="System.Boolean" Required="false" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
                try
                {
                    Regex regex = new Regex(Find, RegexOptions.Multiline | RegexOptions.Compiled);

                    foreach (ITaskItem file in Files)
                    {
                        string fullPath = Path.GetFullPath(file.ItemSpec);
                        string originalText = File.ReadAllText(fullPath);
                        bool matched = regex.IsMatch(originalText);

                        if (!matched)
                        {
                            if (WarnOnNoMatch)
                            {
                                Log.LogWarning("No matches for '{0}' in '{1}'.", Find, fullPath);
                            }
                        }
                        else
                        {
                            File.SetAttributes(fullPath, File.GetAttributes(fullPath) & ~FileAttributes.ReadOnly);
                            File.WriteAllText(fullPath, regex.Replace(originalText, Replace), Encoding.UTF8);
                        }
                    }

                    return true;
                }
                catch (Exception ex)
                {
                    Log.LogErrorFromException(ex);
                    return false;
                }
            ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="PrintTestRunSummary" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <TestResultsDirectory ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq" />
      <Using Namespace="System" />
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Xml.Linq" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
                try
                {
                    string[] testResultFiles = Directory.GetFiles(TestResultsDirectory);

                    int testsPassed = 0;
                    int testsFailed = 0;
                    int testsSkipped = 0;
                    decimal timeSpent = 0;
                    List<string> testFailures = new List<string>();

                    foreach (string testResultFile in testResultFiles)
                    {
                        XElement xml;
                        using (FileStream fileStream = File.OpenRead(testResultFile))
                        {
                            xml = XElement.Load(fileStream);
                        }

                        var assemblies = xml.Elements(XName.Get("assembly"));
                        foreach (XElement assembly in assemblies)
                        {
                            int failures = Int32.Parse(assembly.Attribute(XName.Get("failed")).Value);

                            testsPassed += Int32.Parse(assembly.Attribute(XName.Get("passed")).Value);
                            testsFailed += failures;
                            testsSkipped += Int32.Parse(assembly.Attribute(XName.Get("skipped")).Value);
                            timeSpent += Decimal.Parse(assembly.Attribute(XName.Get("time")).Value);

                            if (failures > 0)
                            {
                                foreach (XElement classWithFailure in assembly.Elements(XName.Get("class"))
                                    .Where(c => Int32.Parse(c.Attribute(XName.Get("failed")).Value) > 0))
                                {
                                    foreach (XElement failure in classWithFailure.Elements(XName.Get("test"))
                                        .Where(test => test.Attribute(XName.Get("result")).Value == "Fail"))
                                    {
                                        testFailures.Add(failure.Attribute("name").Value);
                                    }
                                }
                            }
                        }
                    }

                    if (testFailures.Count > 0)
                    {
                        Console.WriteLine();
                        Console.WriteLine("  Test Failures:");
                        ConsoleColor originalColor = Console.ForegroundColor;
                        Console.ForegroundColor = ConsoleColor.Red;
                        foreach (string testFailure in testFailures)
                        {
                            Console.WriteLine("  " + testFailure);
                        }
                        Console.ForegroundColor = originalColor;
                    }

                    Console.WriteLine();
                    Console.WriteLine("  Tests passed: {0}, Tests failed: {1}, Tests skipped: {2}", testsPassed, testsFailed, testsSkipped);
                    Console.WriteLine("  Time spent running tests: {0} seconds", timeSpent);
                    return true;
                }
                catch (Exception ex)
                {
                    Log.LogErrorFromException(ex);
                    return false;
                }
            ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>