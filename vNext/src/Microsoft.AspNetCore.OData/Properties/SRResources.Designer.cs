// <auto-generated />
namespace Microsoft.AspNetCore.OData
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class SRResources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNetCore.OData.SRResources", typeof(SRResources).GetTypeInfo().Assembly);

        /// <summary>
        /// Cannot serialize a null '{0}'.
        /// </summary>
        internal static string CannotSerializerNull
        {
            get { return GetString("CannotSerializerNull"); }
        }

        /// <summary>
        /// Cannot serialize a null '{0}'.
        /// </summary>
        internal static string FormatCannotSerializerNull(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotSerializerNull"), p0);
        }

        /// <summary>
        /// '{0}' cannot be serialized using the {1}.
        /// </summary>
        internal static string TypeCannotBeSerialized
        {
            get { return GetString("TypeCannotBeSerialized"); }
        }

        /// <summary>
        /// '{0}' cannot be serialized using the {1}.
        /// </summary>
        internal static string FormatTypeCannotBeSerialized(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TypeCannotBeSerialized"), p0, p1);
        }

        /// <summary>
        /// {0} does not support WriteObjectInline.
        /// </summary>
        internal static string WriteObjectInlineNotSupported
        {
            get { return GetString("WriteObjectInlineNotSupported"); }
        }

        /// <summary>
        /// {0} does not support WriteObjectInline.
        /// </summary>
        internal static string FormatWriteObjectInlineNotSupported(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("WriteObjectInlineNotSupported"), p0);
        }

        /// <summary>
        /// The PropertyInfo provided must have public 'get' and 'set' accessor methods.
        /// </summary>
        internal static string PropertyMustHavePublicGetterAndSetter
        {
            get { return GetString("PropertyMustHavePublicGetterAndSetter"); }
        }

        /// <summary>
        /// The PropertyInfo provided must have public 'get' and 'set' accessor methods.
        /// </summary>
        internal static string FormatPropertyMustHavePublicGetterAndSetter()
        {
            return GetString("PropertyMustHavePublicGetterAndSetter");
        }

        /// <summary>
        /// {0} does not support CreateODataValue.
        /// </summary>
        internal static string CreateODataValueNotSupported
        {
            get { return GetString("CreateODataValueNotSupported"); }
        }

        /// <summary>
        /// {0} does not support CreateODataValue.
        /// </summary>
        internal static string FormatCreateODataValueNotSupported(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CreateODataValueNotSupported"), p0);
        }

        /// <summary>
        /// {0} is not a collection of type {1}. Only entity collections are supported.
        /// </summary>
        internal static string TypeMustBeEntityCollection
        {
            get { return GetString("TypeMustBeEntityCollection"); }
        }

        /// <summary>
        /// {0} is not a collection of type {1}. Only entity collections are supported.
        /// </summary>
        internal static string FormatTypeMustBeEntityCollection(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TypeMustBeEntityCollection"), p0, p1);
        }

        /// <summary>
        /// {0} does not support WriteObject.
        /// </summary>
        internal static string WriteObjectNotSupported
        {
            get { return GetString("WriteObjectNotSupported"); }
        }

        /// <summary>
        /// {0} does not support WriteObject.
        /// </summary>
        internal static string FormatWriteObjectNotSupported(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("WriteObjectNotSupported"), p0);
        }

        /// <summary>
        /// The query specified in the URI is not valid. {0}
        /// </summary>
        internal static string UriQueryStringInvalid
        {
            get { return GetString("UriQueryStringInvalid"); }
        }

        /// <summary>
        /// The query specified in the URI is not valid. {0}
        /// </summary>
        internal static string FormatUriQueryStringInvalid(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UriQueryStringInvalid"), p0);
        }

        /// <summary>
        /// The LambdaExpression must have exactly one parameter.
        /// </summary>
        internal static string LambdaExpressionMustHaveExactlyOneParameter
        {
            get { return GetString("LambdaExpressionMustHaveExactlyOneParameter"); }
        }

        /// <summary>
        /// The LambdaExpression must have exactly one parameter.
        /// </summary>
        internal static string FormatLambdaExpressionMustHaveExactlyOneParameter()
        {
            return GetString("LambdaExpressionMustHaveExactlyOneParameter");
        }

        /// <summary>
        /// The LambdaExpression must have exactly two parameters.
        /// </summary>
        internal static string LambdaExpressionMustHaveExactlyTwoParameters
        {
            get { return GetString("LambdaExpressionMustHaveExactlyTwoParameters"); }
        }

        /// <summary>
        /// The LambdaExpression must have exactly two parameters.
        /// </summary>
        internal static string FormatLambdaExpressionMustHaveExactlyTwoParameters()
        {
            return GetString("LambdaExpressionMustHaveExactlyTwoParameters");
        }

        /// <summary>
        /// MemberExpressions must be bound to the LambdaExpression parameter.
        /// </summary>
        internal static string MemberExpressionsMustBeBoundToLambdaParameter
        {
            get { return GetString("MemberExpressionsMustBeBoundToLambdaParameter"); }
        }

        /// <summary>
        /// MemberExpressions must be bound to the LambdaExpression parameter.
        /// </summary>
        internal static string FormatMemberExpressionsMustBeBoundToLambdaParameter()
        {
            return GetString("MemberExpressionsMustBeBoundToLambdaParameter");
        }

        /// <summary>
        /// Member '{0}.{1}' is not a property.
        /// </summary>
        internal static string MemberExpressionsMustBeProperties
        {
            get { return GetString("MemberExpressionsMustBeProperties"); }
        }

        /// <summary>
        /// Member '{0}.{1}' is not a property.
        /// </summary>
        internal static string FormatMemberExpressionsMustBeProperties(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MemberExpressionsMustBeProperties"), p0, p1);
        }

        /// <summary>
        /// The type of left property '{0}.{1}' is '{2}' while the type of right property '{3}.{4}' is '{5}'. The left and right type of the equal expression must be same.
        /// </summary>
        internal static string EqualExpressionsMustHaveSameTypes
        {
            get { return GetString("EqualExpressionsMustHaveSameTypes"); }
        }

        /// <summary>
        /// The type of left property '{0}.{1}' is '{2}' while the type of right property '{3}.{4}' is '{5}'. The left and right type of the equal expression must be same.
        /// </summary>
        internal static string FormatEqualExpressionsMustHaveSameTypes(object p0, object p1, object p2, object p3, object p4, object p5)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EqualExpressionsMustHaveSameTypes"), p0, p1, p2, p3, p4, p5);
        }

        /// <summary>
        /// Unsupported Expression NodeType.
        /// </summary>
        internal static string UnsupportedExpressionNodeType
        {
            get { return GetString("UnsupportedExpressionNodeType"); }
        }

        /// <summary>
        /// Unsupported Expression NodeType.
        /// </summary>
        internal static string FormatUnsupportedExpressionNodeType()
        {
            return GetString("UnsupportedExpressionNodeType");
        }

        /// <summary>
        /// Unsupported Expression NodeType '{0}'.
        /// </summary>
        internal static string UnsupportedExpressionNodeTypeWithName
        {
            get { return GetString("UnsupportedExpressionNodeTypeWithName"); }
        }

        /// <summary>
        /// Unsupported Expression NodeType '{0}'.
        /// </summary>
        internal static string FormatUnsupportedExpressionNodeTypeWithName(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnsupportedExpressionNodeTypeWithName"), p0);
        }

        /// <summary>
        /// Cannot create an EDM model as the action '{0}' on controller '{1}' has a void return type.
        /// </summary>
        internal static string FailedToBuildEdmModelBecauseReturnTypeIsNull
        {
            get { return GetString("FailedToBuildEdmModelBecauseReturnTypeIsNull"); }
        }

        /// <summary>
        /// Cannot create an EDM model as the action '{0}' on controller '{1}' has a void return type.
        /// </summary>
        internal static string FormatFailedToBuildEdmModelBecauseReturnTypeIsNull(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("FailedToBuildEdmModelBecauseReturnTypeIsNull"), p0, p1);
        }

        /// <summary>
        /// Cannot create an EDM model as the action '{0}' on controller '{1}' has a return type '{2}' that does not implement IEnumerable&lt;T&gt;.
        /// </summary>
        internal static string FailedToRetrieveTypeToBuildEdmModel
        {
            get { return GetString("FailedToRetrieveTypeToBuildEdmModel"); }
        }

        /// <summary>
        /// Cannot create an EDM model as the action '{0}' on controller '{1}' has a return type '{2}' that does not implement IEnumerable&lt;T&gt;.
        /// </summary>
        internal static string FormatFailedToRetrieveTypeToBuildEdmModel(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("FailedToRetrieveTypeToBuildEdmModel"), p0, p1, p2);
        }

        /// <summary>
        /// The query parameter '{0}' is not supported.
        /// </summary>
        internal static string QueryParameterNotSupported
        {
            get { return GetString("QueryParameterNotSupported"); }
        }

        /// <summary>
        /// The query parameter '{0}' is not supported.
        /// </summary>
        internal static string FormatQueryParameterNotSupported(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("QueryParameterNotSupported"), p0);
        }

        /// <summary>
        /// Request message does not contain an HttpConfiguration object.
        /// </summary>
        internal static string RequestMustContainConfiguration
        {
            get { return GetString("RequestMustContainConfiguration"); }
        }

        /// <summary>
        /// Request message does not contain an HttpConfiguration object.
        /// </summary>
        internal static string FormatRequestMustContainConfiguration()
        {
            return GetString("RequestMustContainConfiguration");
        }

        /// <summary>
        /// The HttpActionContext.ActionDescriptor is null.
        /// </summary>
        internal static string ActionContextMustHaveDescriptor
        {
            get { return GetString("ActionContextMustHaveDescriptor"); }
        }

        /// <summary>
        /// The HttpActionContext.ActionDescriptor is null.
        /// </summary>
        internal static string FormatActionContextMustHaveDescriptor()
        {
            return GetString("ActionContextMustHaveDescriptor");
        }

        /// <summary>
        /// The HttpActionContext.Request is null.
        /// </summary>
        internal static string ActionContextMustHaveRequest
        {
            get { return GetString("ActionContextMustHaveRequest"); }
        }

        /// <summary>
        /// The HttpActionContext.Request is null.
        /// </summary>
        internal static string FormatActionContextMustHaveRequest()
        {
            return GetString("ActionContextMustHaveRequest");
        }

        /// <summary>
        /// The HttpActionExecutedContext.ActionContext is null.
        /// </summary>
        internal static string ActionExecutedContextMustHaveActionContext
        {
            get { return GetString("ActionExecutedContextMustHaveActionContext"); }
        }

        /// <summary>
        /// The HttpActionExecutedContext.ActionContext is null.
        /// </summary>
        internal static string FormatActionExecutedContextMustHaveActionContext()
        {
            return GetString("ActionExecutedContextMustHaveActionContext");
        }

        /// <summary>
        /// The HttpExecutedActionContext.Request is null.
        /// </summary>
        internal static string ActionExecutedContextMustHaveRequest
        {
            get { return GetString("ActionExecutedContextMustHaveRequest"); }
        }

        /// <summary>
        /// The HttpExecutedActionContext.Request is null.
        /// </summary>
        internal static string FormatActionExecutedContextMustHaveRequest()
        {
            return GetString("ActionExecutedContextMustHaveRequest");
        }

        /// <summary>
        /// Only ordering by properties is supported for non-primitive collections. Expressions are not supported.
        /// </summary>
        internal static string OrderByClauseNotSupported
        {
            get { return GetString("OrderByClauseNotSupported"); }
        }

        /// <summary>
        /// Only ordering by properties is supported for non-primitive collections. Expressions are not supported.
        /// </summary>
        internal static string FormatOrderByClauseNotSupported()
        {
            return GetString("OrderByClauseNotSupported");
        }

        /// <summary>
        /// No EntitySet exists in the EdmModel with entitySetName '{0}'.
        /// </summary>
        internal static string EntitySetNotFoundForName
        {
            get { return GetString("EntitySetNotFoundForName"); }
        }

        /// <summary>
        /// No EntitySet exists in the EdmModel with entitySetName '{0}'.
        /// </summary>
        internal static string FormatEntitySetNotFoundForName(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EntitySetNotFoundForName"), p0);
        }

        /// <summary>
        /// The value for OData query '{0}' cannot be empty.
        /// </summary>
        internal static string QueryCannotBeEmpty
        {
            get { return GetString("QueryCannotBeEmpty"); }
        }

        /// <summary>
        /// The value for OData query '{0}' cannot be empty.
        /// </summary>
        internal static string FormatQueryCannotBeEmpty(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("QueryCannotBeEmpty"), p0);
        }

        /// <summary>
        /// {0} is not a supported EDM type.
        /// </summary>
        internal static string EdmTypeNotSupported
        {
            get { return GetString("EdmTypeNotSupported"); }
        }

        /// <summary>
        /// {0} is not a supported EDM type.
        /// </summary>
        internal static string FormatEdmTypeNotSupported(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EdmTypeNotSupported"), p0);
        }

        /// <summary>
        /// More than one matching CLR type found for the EDM type {0}.\nThe matching CLR types are {1}.
        /// </summary>
        internal static string MultipleMatchingClrTypesForEdmType
        {
            get { return GetString("MultipleMatchingClrTypesForEdmType"); }
        }

        /// <summary>
        /// More than one matching CLR type found for the EDM type {0}.\nThe matching CLR types are {1}.
        /// </summary>
        internal static string FormatMultipleMatchingClrTypesForEdmType(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MultipleMatchingClrTypesForEdmType"), p0, p1);
        }

        /// <summary>
        /// Unknown function '{0}'.
        /// </summary>
        internal static string ODataFunctionNotSupported
        {
            get { return GetString("ODataFunctionNotSupported"); }
        }

        /// <summary>
        /// Unknown function '{0}'.
        /// </summary>
        internal static string FormatODataFunctionNotSupported(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ODataFunctionNotSupported"), p0);
        }

        /// <summary>
        /// Binding OData QueryNode of kind {0} is not supported by {1}.
        /// </summary>
        internal static string QueryNodeBindingNotSupported
        {
            get { return GetString("QueryNodeBindingNotSupported"); }
        }

        /// <summary>
        /// Binding OData QueryNode of kind {0} is not supported by {1}.
        /// </summary>
        internal static string FormatQueryNodeBindingNotSupported(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("QueryNodeBindingNotSupported"), p0, p1);
        }

        /// <summary>
        /// Validating OData QueryNode of kind {0} is not supported by {1}.
        /// </summary>
        internal static string QueryNodeValidationNotSupported
        {
            get { return GetString("QueryNodeValidationNotSupported"); }
        }

        /// <summary>
        /// Validating OData QueryNode of kind {0} is not supported by {1}.
        /// </summary>
        internal static string FormatQueryNodeValidationNotSupported(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("QueryNodeValidationNotSupported"), p0, p1);
        }

        /// <summary>
        /// Validating OData UnaryOperatorNode of kind {0} is not supported by {1}.
        /// </summary>
        internal static string UnaryNodeValidationNotSupported
        {
            get { return GetString("UnaryNodeValidationNotSupported"); }
        }

        /// <summary>
        /// Validating OData UnaryOperatorNode of kind {0} is not supported by {1}.
        /// </summary>
        internal static string FormatUnaryNodeValidationNotSupported(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnaryNodeValidationNotSupported"), p0, p1);
        }

        /// <summary>
        /// Duplicate property named '{0}' is not supported in '$orderby'.
        /// </summary>
        internal static string OrderByDuplicateProperty
        {
            get { return GetString("OrderByDuplicateProperty"); }
        }

        /// <summary>
        /// Duplicate property named '{0}' is not supported in '$orderby'.
        /// </summary>
        internal static string FormatOrderByDuplicateProperty(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("OrderByDuplicateProperty"), p0);
        }

        /// <summary>
        /// '{0}' does not recognize the node with type '{1}'.
        /// </summary>
        internal static string CannotRecognizeNodeType
        {
            get { return GetString("CannotRecognizeNodeType"); }
        }

        /// <summary>
        /// '{0}' does not recognize the node with type '{1}'.
        /// </summary>
        internal static string FormatCannotRecognizeNodeType(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotRecognizeNodeType"), p0, p1);
        }

        /// <summary>
        /// '{0}' of kind '{1}' is not implemented.
        /// </summary>
        internal static string TargetKindNotImplemented
        {
            get { return GetString("TargetKindNotImplemented"); }
        }

        /// <summary>
        /// '{0}' of kind '{1}' is not implemented.
        /// </summary>
        internal static string FormatTargetKindNotImplemented(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TargetKindNotImplemented"), p0, p1);
        }

        /// <summary>
        /// The value of $id '{0}' is invalid.
        /// </summary>
        internal static string InvalidDollarId
        {
            get { return GetString("InvalidDollarId"); }
        }

        /// <summary>
        /// The value of $id '{0}' is invalid.
        /// </summary>
        internal static string FormatInvalidDollarId(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidDollarId"), p0);
        }

        /// <summary>
        /// The type '{0}' is not supported by the ODataErrorSerializer. The type must be ODataError or HttpError.
        /// </summary>
        internal static string ErrorTypeMustBeODataErrorOrHttpError
        {
            get { return GetString("ErrorTypeMustBeODataErrorOrHttpError"); }
        }

        /// <summary>
        /// The type '{0}' is not supported by the ODataErrorSerializer. The type must be ODataError or HttpError.
        /// </summary>
        internal static string FormatErrorTypeMustBeODataErrorOrHttpError(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ErrorTypeMustBeODataErrorOrHttpError"), p0);
        }

        /// <summary>
        /// Cannot automatically bind the navigation property '{0}' on entity type '{1}' for the entity set or singleton '{2}' because there are two or more matching target entity sets or singletons. The matching entity sets or singletons are: {3}.
        /// </summary>
        internal static string CannotAutoCreateMultipleCandidates
        {
            get { return GetString("CannotAutoCreateMultipleCandidates"); }
        }

        /// <summary>
        /// Cannot automatically bind the navigation property '{0}' on entity type '{1}' for the entity set or singleton '{2}' because there are two or more matching target entity sets or singletons. The matching entity sets or singletons are: {3}.
        /// </summary>
        internal static string FormatCannotAutoCreateMultipleCandidates(object p0, object p1, object p2, object p3)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotAutoCreateMultipleCandidates"), p0, p1, p2, p3);
        }

        /// <summary>
        /// The property '{0}' does not belong to the type '{1}'.
        /// </summary>
        internal static string PropertyDoesNotBelongToType
        {
            get { return GetString("PropertyDoesNotBelongToType"); }
        }

        /// <summary>
        /// The property '{0}' does not belong to the type '{1}'.
        /// </summary>
        internal static string FormatPropertyDoesNotBelongToType(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PropertyDoesNotBelongToType"), p0, p1);
        }

        /// <summary>
        /// The entity set '{0}' was already configured with a different EntityType ('{1}').
        /// </summary>
        internal static string EntitySetAlreadyConfiguredDifferentEntityType
        {
            get { return GetString("EntitySetAlreadyConfiguredDifferentEntityType"); }
        }

        /// <summary>
        /// The entity set '{0}' was already configured with a different EntityType ('{1}').
        /// </summary>
        internal static string FormatEntitySetAlreadyConfiguredDifferentEntityType(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EntitySetAlreadyConfiguredDifferentEntityType"), p0, p1);
        }

        /// <summary>
        /// The type '{0}' cannot be configured as a ComplexType. It was previously configured as an EntityType.
        /// </summary>
        internal static string TypeCannotBeComplexWasEntity
        {
            get { return GetString("TypeCannotBeComplexWasEntity"); }
        }

        /// <summary>
        /// The type '{0}' cannot be configured as a ComplexType. It was previously configured as an EntityType.
        /// </summary>
        internal static string FormatTypeCannotBeComplexWasEntity(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TypeCannotBeComplexWasEntity"), p0);
        }

        /// <summary>
        /// The type '{0}' cannot be configured as an EntityType. It was previously configured as a ComplexType.
        /// </summary>
        internal static string TypeCannotBeEntityWasComplex
        {
            get { return GetString("TypeCannotBeEntityWasComplex"); }
        }

        /// <summary>
        /// The type '{0}' cannot be configured as an EntityType. It was previously configured as a ComplexType.
        /// </summary>
        internal static string FormatTypeCannotBeEntityWasComplex(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TypeCannotBeEntityWasComplex"), p0);
        }

        /// <summary>
        /// The type '{0}' cannot be configured as an enum type.
        /// </summary>
        internal static string TypeCannotBeEnum
        {
            get { return GetString("TypeCannotBeEnum"); }
        }

        /// <summary>
        /// The type '{0}' cannot be configured as an enum type.
        /// </summary>
        internal static string FormatTypeCannotBeEnum(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TypeCannotBeEnum"), p0);
        }

        /// <summary>
        /// The value of enum member '{0}' cannot be converted to a long type.
        /// </summary>
        internal static string EnumValueCannotBeLong
        {
            get { return GetString("EnumValueCannotBeLong"); }
        }

        /// <summary>
        /// The value of enum member '{0}' cannot be converted to a long type.
        /// </summary>
        internal static string FormatEnumValueCannotBeLong(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EnumValueCannotBeLong"), p0);
        }

        /// <summary>
        /// The enum type '{0}' does not exist.
        /// </summary>
        internal static string EnumTypeDoesNotExist
        {
            get { return GetString("EnumTypeDoesNotExist"); }
        }

        /// <summary>
        /// The enum type '{0}' does not exist.
        /// </summary>
        internal static string FormatEnumTypeDoesNotExist(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EnumTypeDoesNotExist"), p0);
        }

        /// <summary>
        /// The complex type '{0}' has a reference to itself through the property '{1}'. A recursive loop of complex types is not allowed.
        /// </summary>
        internal static string RecursiveComplexTypesNotAllowed
        {
            get { return GetString("RecursiveComplexTypesNotAllowed"); }
        }

        /// <summary>
        /// The complex type '{0}' has a reference to itself through the property '{1}'. A recursive loop of complex types is not allowed.
        /// </summary>
        internal static string FormatRecursiveComplexTypesNotAllowed(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RecursiveComplexTypesNotAllowed"), p0, p1);
        }

        /// <summary>
        /// '{0}' does not support Read.
        /// </summary>
        internal static string DeserializerDoesNotSupportRead
        {
            get { return GetString("DeserializerDoesNotSupportRead"); }
        }

        /// <summary>
        /// '{0}' does not support Read.
        /// </summary>
        internal static string FormatDeserializerDoesNotSupportRead(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DeserializerDoesNotSupportRead"), p0);
        }

        /// <summary>
        /// The provided mapping does not contain an entry for the entity type '{0}'.
        /// </summary>
        internal static string MappingDoesNotContainEntityType
        {
            get { return GetString("MappingDoesNotContainEntityType"); }
        }

        /// <summary>
        /// The provided mapping does not contain an entry for the entity type '{0}'.
        /// </summary>
        internal static string FormatMappingDoesNotContainEntityType(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MappingDoesNotContainEntityType"), p0);
        }

        /// <summary>
        /// The property '{0}' on the type '{1}' is being configured as a Many-to-Many navigation property. Many to Many navigation properties must be collections.
        /// </summary>
        internal static string ManyToManyNavigationPropertyMustReturnCollection
        {
            get { return GetString("ManyToManyNavigationPropertyMustReturnCollection"); }
        }

        /// <summary>
        /// The property '{0}' on the type '{1}' is being configured as a Many-to-Many navigation property. Many to Many navigation properties must be collections.
        /// </summary>
        internal static string FormatManyToManyNavigationPropertyMustReturnCollection(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ManyToManyNavigationPropertyMustReturnCollection"), p0, p1);
        }

        /// <summary>
        /// Type '{0}' does not support ReadInline.
        /// </summary>
        internal static string DoesNotSupportReadInLine
        {
            get { return GetString("DoesNotSupportReadInLine"); }
        }

        /// <summary>
        /// Type '{0}' does not support ReadInline.
        /// </summary>
        internal static string FormatDoesNotSupportReadInLine(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DoesNotSupportReadInLine"), p0);
        }

        /// <summary>
        /// Reading type '{0}' is not supported by '{1}'.
        /// </summary>
        internal static string FormatterReadIsNotSupportedForType
        {
            get { return GetString("FormatterReadIsNotSupportedForType"); }
        }

        /// <summary>
        /// Reading type '{0}' is not supported by '{1}'.
        /// </summary>
        internal static string FormatFormatterReadIsNotSupportedForType(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("FormatterReadIsNotSupportedForType"), p0, p1);
        }

        /// <summary>
        /// The property '{0}' on type '{1}' must be a Complex property.
        /// </summary>
        internal static string MustBeComplexProperty
        {
            get { return GetString("MustBeComplexProperty"); }
        }

        /// <summary>
        /// The property '{0}' on type '{1}' must be a Complex property.
        /// </summary>
        internal static string FormatMustBeComplexProperty(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MustBeComplexProperty"), p0, p1);
        }

        /// <summary>
        /// The property  '{0}' on type '{1}' must be a Navigation property.
        /// </summary>
        internal static string MustBeNavigationProperty
        {
            get { return GetString("MustBeNavigationProperty"); }
        }

        /// <summary>
        /// The property  '{0}' on type '{1}' must be a Navigation property.
        /// </summary>
        internal static string FormatMustBeNavigationProperty(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MustBeNavigationProperty"), p0, p1);
        }

        /// <summary>
        /// The property '{0}'  on type '{1}' must be a Primitive property.
        /// </summary>
        internal static string MustBePrimitiveProperty
        {
            get { return GetString("MustBePrimitiveProperty"); }
        }

        /// <summary>
        /// The property '{0}'  on type '{1}' must be a Primitive property.
        /// </summary>
        internal static string FormatMustBePrimitiveProperty(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MustBePrimitiveProperty"), p0, p1);
        }

        /// <summary>
        /// The property '{0}' on type '{1}' must be an Enum property.
        /// </summary>
        internal static string MustBeEnumProperty
        {
            get { return GetString("MustBeEnumProperty"); }
        }

        /// <summary>
        /// The property '{0}' on type '{1}' must be an Enum property.
        /// </summary>
        internal static string FormatMustBeEnumProperty(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MustBeEnumProperty"), p0, p1);
        }

        /// <summary>
        /// The multiplicity of the '{0}' property must be '{1}'.
        /// </summary>
        internal static string MustHaveMatchingMultiplicity
        {
            get { return GetString("MustHaveMatchingMultiplicity"); }
        }

        /// <summary>
        /// The multiplicity of the '{0}' property must be '{1}'.
        /// </summary>
        internal static string FormatMustHaveMatchingMultiplicity(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MustHaveMatchingMultiplicity"), p0, p1);
        }

        /// <summary>
        /// The type '{0}' must be a primitive type.
        /// </summary>
        internal static string MustBePrimitiveType
        {
            get { return GetString("MustBePrimitiveType"); }
        }

        /// <summary>
        /// The type '{0}' must be a primitive type.
        /// </summary>
        internal static string FormatMustBePrimitiveType(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MustBePrimitiveType"), p0);
        }

        /// <summary>
        /// Rebinding is not supported.
        /// </summary>
        internal static string RebindingNotSupported
        {
            get { return GetString("RebindingNotSupported"); }
        }

        /// <summary>
        /// Rebinding is not supported.
        /// </summary>
        internal static string FormatRebindingNotSupported()
        {
            return GetString("RebindingNotSupported");
        }

        /// <summary>
        /// The node count limit of '{0}' has been exceeded. To increase the limit, set the '{1}' property on EnableQueryAttribute or ODataValidationSettings.
        /// </summary>
        internal static string MaxNodeLimitExceeded
        {
            get { return GetString("MaxNodeLimitExceeded"); }
        }

        /// <summary>
        /// The node count limit of '{0}' has been exceeded. To increase the limit, set the '{1}' property on EnableQueryAttribute or ODataValidationSettings.
        /// </summary>
        internal static string FormatMaxNodeLimitExceeded(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MaxNodeLimitExceeded"), p0, p1);
        }

        /// <summary>
        /// '{0}' is not a valid entity set name.
        /// </summary>
        internal static string InvalidEntitySetName
        {
            get { return GetString("InvalidEntitySetName"); }
        }

        /// <summary>
        /// '{0}' is not a valid entity set name.
        /// </summary>
        internal static string FormatInvalidEntitySetName(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidEntitySetName"), p0);
        }

        /// <summary>
        /// Cannot cast $filter of type '{0}' to type '{1}'.
        /// </summary>
        internal static string CannotCastFilter
        {
            get { return GetString("CannotCastFilter"); }
        }

        /// <summary>
        /// Cannot cast $filter of type '{0}' to type '{1}'.
        /// </summary>
        internal static string FormatCannotCastFilter(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotCastFilter"), p0, p1);
        }

        /// <summary>
        /// The complex type '{0}' refers to the entity type '{1}' through the property '{2}'.
        /// </summary>
        internal static string ComplexTypeRefersToEntityType
        {
            get { return GetString("ComplexTypeRefersToEntityType"); }
        }

        /// <summary>
        /// The complex type '{0}' refers to the entity type '{1}' through the property '{2}'.
        /// </summary>
        internal static string FormatComplexTypeRefersToEntityType(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ComplexTypeRefersToEntityType"), p0, p1, p2);
        }

        /// <summary>
        /// The member '{0}' on type '{1}' contains multiple instances of the attribute '{2}'.
        /// </summary>
        internal static string MultipleAttributesFound
        {
            get { return GetString("MultipleAttributesFound"); }
        }

        /// <summary>
        /// The member '{0}' on type '{1}' contains multiple instances of the attribute '{2}'.
        /// </summary>
        internal static string FormatMultipleAttributesFound(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MultipleAttributesFound"), p0, p1, p2);
        }

        /// <summary>
        /// GetEdmModel cannot be called more than once. Consider using a different instance of the model builder or reusing the model you have built earlier.
        /// </summary>
        internal static string GetEdmModelCalledMoreThanOnce
        {
            get { return GetString("GetEdmModelCalledMoreThanOnce"); }
        }

        /// <summary>
        /// GetEdmModel cannot be called more than once. Consider using a different instance of the model builder or reusing the model you have built earlier.
        /// </summary>
        internal static string FormatGetEdmModelCalledMoreThanOnce()
        {
            return GetString("GetEdmModelCalledMoreThanOnce");
        }

        /// <summary>
        /// CollectionProperties must implement IEnumerable&lt;&gt;. The property '{0}' declared on '{1}' does not implement IEnumerable&lt;&gt;.
        /// </summary>
        internal static string CollectionPropertiesMustReturnIEnumerable
        {
            get { return GetString("CollectionPropertiesMustReturnIEnumerable"); }
        }

        /// <summary>
        /// CollectionProperties must implement IEnumerable&lt;&gt;. The property '{0}' declared on '{1}' does not implement IEnumerable&lt;&gt;.
        /// </summary>
        internal static string FormatCollectionPropertiesMustReturnIEnumerable(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CollectionPropertiesMustReturnIEnumerable"), p0, p1);
        }

        /// <summary>
        /// The '{0}' property on '{1}' must be a Collection property.
        /// </summary>
        internal static string MustBeCollectionProperty
        {
            get { return GetString("MustBeCollectionProperty"); }
        }

        /// <summary>
        /// The '{0}' property on '{1}' must be a Collection property.
        /// </summary>
        internal static string FormatMustBeCollectionProperty(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MustBeCollectionProperty"), p0, p1);
        }

        /// <summary>
        /// Cannot apply PATCH to navigation property '{0}' on entity type '{1}'.
        /// </summary>
        internal static string CannotPatchNavigationProperties
        {
            get { return GetString("CannotPatchNavigationProperties"); }
        }

        /// <summary>
        /// Cannot apply PATCH to navigation property '{0}' on entity type '{1}'.
        /// </summary>
        internal static string FormatCannotPatchNavigationProperties(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotPatchNavigationProperties"), p0, p1);
        }

        /// <summary>
        /// The type '{0}' must be an enum or Nullable&lt;T&gt; where T is an enum type.
        /// </summary>
        internal static string TypeMustBeEnumOrNullableEnum
        {
            get { return GetString("TypeMustBeEnumOrNullableEnum"); }
        }

        /// <summary>
        /// The type '{0}' must be an enum or Nullable&lt;T&gt; where T is an enum type.
        /// </summary>
        internal static string FormatTypeMustBeEnumOrNullableEnum(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TypeMustBeEnumOrNullableEnum"), p0);
        }

        /// <summary>
        /// The value with type '{0}' must have type '{1}'.
        /// </summary>
        internal static string PropertyMustBeEnum
        {
            get { return GetString("PropertyMustBeEnum"); }
        }

        /// <summary>
        /// The value with type '{0}' must have type '{1}'.
        /// </summary>
        internal static string FormatPropertyMustBeEnum(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PropertyMustBeEnum"), p0, p1);
        }

        /// <summary>
        /// The value must be a string.
        /// </summary>
        internal static string PropertyMustBeString
        {
            get { return GetString("PropertyMustBeString"); }
        }

        /// <summary>
        /// The value must be a string.
        /// </summary>
        internal static string FormatPropertyMustBeString()
        {
            return GetString("PropertyMustBeString");
        }

        /// <summary>
        /// The value must be a DateTimeOffset.
        /// </summary>
        internal static string PropertyMustBeDateTimeOffset
        {
            get { return GetString("PropertyMustBeDateTimeOffset"); }
        }

        /// <summary>
        /// The value must be a DateTimeOffset.
        /// </summary>
        internal static string FormatPropertyMustBeDateTimeOffset()
        {
            return GetString("PropertyMustBeDateTimeOffset");
        }

        /// <summary>
        /// The value must be a string with a length of 1.
        /// </summary>
        internal static string PropertyMustBeStringLengthOne
        {
            get { return GetString("PropertyMustBeStringLengthOne"); }
        }

        /// <summary>
        /// The value must be a string with a length of 1.
        /// </summary>
        internal static string FormatPropertyMustBeStringLengthOne()
        {
            return GetString("PropertyMustBeStringLengthOne");
        }

        /// <summary>
        /// The value must be a string with a maximum length of 1.
        /// </summary>
        internal static string PropertyMustBeStringMaxLengthOne
        {
            get { return GetString("PropertyMustBeStringMaxLengthOne"); }
        }

        /// <summary>
        /// The value must be a string with a maximum length of 1.
        /// </summary>
        internal static string FormatPropertyMustBeStringMaxLengthOne()
        {
            return GetString("PropertyMustBeStringMaxLengthOne");
        }

        /// <summary>
        /// The argument must be of type '{0}'.
        /// </summary>
        internal static string ArgumentMustBeOfType
        {
            get { return GetString("ArgumentMustBeOfType"); }
        }

        /// <summary>
        /// The argument must be of type '{0}'.
        /// </summary>
        internal static string FormatArgumentMustBeOfType(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ArgumentMustBeOfType"), p0);
        }

        /// <summary>
        /// The type '{0}' of the property '{1}' on type '{2}' does not have an Add method. Consider using a collection type that does have an Add method - for example IList&lt;T&gt; or ICollection&lt;T&gt;.
        /// </summary>
        internal static string CollectionShouldHaveAddMethod
        {
            get { return GetString("CollectionShouldHaveAddMethod"); }
        }

        /// <summary>
        /// The type '{0}' of the property '{1}' on type '{2}' does not have an Add method. Consider using a collection type that does have an Add method - for example IList&lt;T&gt; or ICollection&lt;T&gt;.
        /// </summary>
        internal static string FormatCollectionShouldHaveAddMethod(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CollectionShouldHaveAddMethod"), p0, p1, p2);
        }

        /// <summary>
        /// Invalid bindingParameter type '{0}'. A bindingParameter must be either an EntityType or a Collection of EntityTypes.
        /// </summary>
        internal static string InvalidBindingParameterType
        {
            get { return GetString("InvalidBindingParameterType"); }
        }

        /// <summary>
        /// Invalid bindingParameter type '{0}'. A bindingParameter must be either an EntityType or a Collection of EntityTypes.
        /// </summary>
        internal static string FormatInvalidBindingParameterType(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidBindingParameterType"), p0);
        }

        /// <summary>
        /// More than one Procedure called '{0}' was found. Try using the other RemoveProcedure override.
        /// </summary>
        internal static string MoreThanOneProcedureFound
        {
            get { return GetString("MoreThanOneProcedureFound"); }
        }

        /// <summary>
        /// More than one Procedure called '{0}' was found. Try using the other RemoveProcedure override.
        /// </summary>
        internal static string FormatMoreThanOneProcedureFound(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MoreThanOneProcedureFound"), p0);
        }

        /// <summary>
        /// No IEdmType could be found for '{0}'.
        /// </summary>
        internal static string NoMatchingIEdmTypeFound
        {
            get { return GetString("NoMatchingIEdmTypeFound"); }
        }

        /// <summary>
        /// No IEdmType could be found for '{0}'.
        /// </summary>
        internal static string FormatNoMatchingIEdmTypeFound(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoMatchingIEdmTypeFound"), p0);
        }

        /// <summary>
        /// Found unsupported EdmTypeKind '{0}' in list of available types.
        /// </summary>
        internal static string UnsupportedEdmTypeKind
        {
            get { return GetString("UnsupportedEdmTypeKind"); }
        }

        /// <summary>
        /// Found unsupported EdmTypeKind '{0}' in list of available types.
        /// </summary>
        internal static string FormatUnsupportedEdmTypeKind(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnsupportedEdmTypeKind"), p0);
        }

        /// <summary>
        /// Cannot define keys on type '{0}' deriving from '{1}'. The base type in the entity inheritance hierarchy already contains keys.
        /// </summary>
        internal static string CannotDefineKeysOnDerivedTypes
        {
            get { return GetString("CannotDefineKeysOnDerivedTypes"); }
        }

        /// <summary>
        /// Cannot define keys on type '{0}' deriving from '{1}'. The base type in the entity inheritance hierarchy already contains keys.
        /// </summary>
        internal static string FormatCannotDefineKeysOnDerivedTypes(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotDefineKeysOnDerivedTypes"), p0, p1);
        }

        /// <summary>
        /// Cannot redefine property '{0}' already defined on the base type '{1}'.
        /// </summary>
        internal static string CannotRedefineBaseTypeProperty
        {
            get { return GetString("CannotRedefineBaseTypeProperty"); }
        }

        /// <summary>
        /// Cannot redefine property '{0}' already defined on the base type '{1}'.
        /// </summary>
        internal static string FormatCannotRedefineBaseTypeProperty(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotRedefineBaseTypeProperty"), p0, p1);
        }

        /// <summary>
        /// '{0}' does not inherit from '{1}'.
        /// </summary>
        internal static string TypeDoesNotInheritFromBaseType
        {
            get { return GetString("TypeDoesNotInheritFromBaseType"); }
        }

        /// <summary>
        /// '{0}' does not inherit from '{1}'.
        /// </summary>
        internal static string FormatTypeDoesNotInheritFromBaseType(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TypeDoesNotInheritFromBaseType"), p0, p1);
        }

        /// <summary>
        /// Cannot define property '{0}' in the base type '{1}' as the derived type '{2}' already defines it.
        /// </summary>
        internal static string PropertyAlreadyDefinedInDerivedType
        {
            get { return GetString("PropertyAlreadyDefinedInDerivedType"); }
        }

        /// <summary>
        /// Cannot define property '{0}' in the base type '{1}' as the derived type '{2}' already defines it.
        /// </summary>
        internal static string FormatPropertyAlreadyDefinedInDerivedType(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PropertyAlreadyDefinedInDerivedType"), p0, p1, p2);
        }

        /// <summary>
        /// Cannot compare an enum of type '{0}' to an expression of type '{1}'.
        /// </summary>
        internal static string ConvertToEnumFailed
        {
            get { return GetString("ConvertToEnumFailed"); }
        }

        /// <summary>
        /// Cannot compare an enum of type '{0}' to an expression of type '{1}'.
        /// </summary>
        internal static string FormatConvertToEnumFailed(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ConvertToEnumFailed"), p0, p1);
        }

        /// <summary>
        /// The '{0}' function cannot be applied to an enumeration-typed argument.
        /// </summary>
        internal static string FunctionNotSupportedOnEnum
        {
            get { return GetString("FunctionNotSupportedOnEnum"); }
        }

        /// <summary>
        /// The '{0}' function cannot be applied to an enumeration-typed argument.
        /// </summary>
        internal static string FormatFunctionNotSupportedOnEnum(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("FunctionNotSupportedOnEnum"), p0);
        }

        /// <summary>
        /// An instance of the abstract entity type '{0}' was found. Abstract entity types cannot be instantiated.
        /// </summary>
        internal static string CannotInstantiateAbstractEntityType
        {
            get { return GetString("CannotInstantiateAbstractEntityType"); }
        }

        /// <summary>
        /// An instance of the abstract entity type '{0}' was found. Abstract entity types cannot be instantiated.
        /// </summary>
        internal static string FormatCannotInstantiateAbstractEntityType(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotInstantiateAbstractEntityType"), p0);
        }

        /// <summary>
        /// An instance of the abstract complex type '{0}' was found. Abstract complex types cannot be instantiated.
        /// </summary>
        internal static string CannotInstantiateAbstractComplexType
        {
            get { return GetString("CannotInstantiateAbstractComplexType"); }
        }

        /// <summary>
        /// An instance of the abstract complex type '{0}' was found. Abstract complex types cannot be instantiated.
        /// </summary>
        internal static string FormatCannotInstantiateAbstractComplexType(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotInstantiateAbstractComplexType"), p0);
        }

        /// <summary>
        /// Collections cannot contain null elements.
        /// </summary>
        internal static string NullElementInCollection
        {
            get { return GetString("NullElementInCollection"); }
        }

        /// <summary>
        /// Collections cannot contain null elements.
        /// </summary>
        internal static string FormatNullElementInCollection()
        {
            return GetString("NullElementInCollection");
        }

        /// <summary>
        /// The OData formatter does not support writing client requests. This formatter instance must have an associated request.
        /// </summary>
        internal static string WriteToStreamAsyncMustHaveRequest
        {
            get { return GetString("WriteToStreamAsyncMustHaveRequest"); }
        }

        /// <summary>
        /// The OData formatter does not support writing client requests. This formatter instance must have an associated request.
        /// </summary>
        internal static string FormatWriteToStreamAsyncMustHaveRequest()
        {
            return GetString("WriteToStreamAsyncMustHaveRequest");
        }

        /// <summary>
        /// The value '{0}' is invalid. {1}
        /// </summary>
        internal static string ValueIsInvalid
        {
            get { return GetString("ValueIsInvalid"); }
        }

        /// <summary>
        /// The value '{0}' is invalid. {1}
        /// </summary>
        internal static string FormatValueIsInvalid(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ValueIsInvalid"), p0, p1);
        }

        /// <summary>
        /// The binding value '{0}' cannot be bound to the enum type '{1}'.
        /// </summary>
        internal static string ModelBinderUtil_ValueCannotBeEnum
        {
            get { return GetString("ModelBinderUtil_ValueCannotBeEnum"); }
        }

        /// <summary>
        /// The binding value '{0}' cannot be bound to the enum type '{1}'.
        /// </summary>
        internal static string FormatModelBinderUtil_ValueCannotBeEnum(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ModelBinderUtil_ValueCannotBeEnum"), p0, p1);
        }

        /// <summary>
        /// The binding context cannot have a null ModelMetadata.
        /// </summary>
        internal static string ModelBinderUtil_ModelMetadataCannotBeNull
        {
            get { return GetString("ModelBinderUtil_ModelMetadataCannotBeNull"); }
        }

        /// <summary>
        /// The binding context cannot have a null ModelMetadata.
        /// </summary>
        internal static string FormatModelBinderUtil_ModelMetadataCannotBeNull()
        {
            return GetString("ModelBinderUtil_ModelMetadataCannotBeNull");
        }

        /// <summary>
        /// The entity type '{0}' does not match the expected entity type '{1}' as set on the query context.
        /// </summary>
        internal static string EntityTypeMismatch
        {
            get { return GetString("EntityTypeMismatch"); }
        }

        /// <summary>
        /// The entity type '{0}' does not match the expected entity type '{1}' as set on the query context.
        /// </summary>
        internal static string FormatEntityTypeMismatch(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EntityTypeMismatch"), p0, p1);
        }

        /// <summary>
        /// Cannot apply {0} of '{1}' to {2} of '{3}'.
        /// </summary>
        internal static string CannotApplyODataQueryOptionsOfT
        {
            get { return GetString("CannotApplyODataQueryOptionsOfT"); }
        }

        /// <summary>
        /// Cannot apply {0} of '{1}' to {2} of '{3}'.
        /// </summary>
        internal static string FormatCannotApplyODataQueryOptionsOfT(object p0, object p1, object p2, object p3)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotApplyODataQueryOptionsOfT"), p0, p1, p2, p3);
        }

        /// <summary>
        /// To register an action link factory, actions must be bindable to a single entity. Action '{0}' does not meet this requirement.
        /// </summary>
        internal static string HasActionLinkRequiresBindToEntity
        {
            get { return GetString("HasActionLinkRequiresBindToEntity"); }
        }

        /// <summary>
        /// To register an action link factory, actions must be bindable to a single entity. Action '{0}' does not meet this requirement.
        /// </summary>
        internal static string FormatHasActionLinkRequiresBindToEntity(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("HasActionLinkRequiresBindToEntity"), p0);
        }

        /// <summary>
        /// The declaring entity type '{0}' of the given navigation property is not a part of the entity type '{1}' hierarchy of the entity set or singleton '{2}'.
        /// </summary>
        internal static string NavigationPropertyNotInHierarchy
        {
            get { return GetString("NavigationPropertyNotInHierarchy"); }
        }

        /// <summary>
        /// The declaring entity type '{0}' of the given navigation property is not a part of the entity type '{1}' hierarchy of the entity set or singleton '{2}'.
        /// </summary>
        internal static string FormatNavigationPropertyNotInHierarchy(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NavigationPropertyNotInHierarchy"), p0, p1, p2);
        }

        /// <summary>
        /// Could not find the target entity type for the navigation property '{0}' on entity type '{1}'.
        /// </summary>
        internal static string TargetEntityTypeMissing
        {
            get { return GetString("TargetEntityTypeMissing"); }
        }

        /// <summary>
        /// Could not find the target entity type for the navigation property '{0}' on entity type '{1}'.
        /// </summary>
        internal static string FormatTargetEntityTypeMissing(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TargetEntityTypeMissing"), p0, p1);
        }

        /// <summary>
        /// Key property '{0}' of type '{1}' is null. Key properties cannot have null values.
        /// </summary>
        internal static string KeyValueCannotBeNull
        {
            get { return GetString("KeyValueCannotBeNull"); }
        }

        /// <summary>
        /// Key property '{0}' of type '{1}' is null. Key properties cannot have null values.
        /// </summary>
        internal static string FormatKeyValueCannotBeNull(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("KeyValueCannotBeNull"), p0, p1);
        }

        /// <summary>
        /// A binary operator with incompatible types was detected. Found operand types '{0}' and '{1}' for operator kind '{2}'.
        /// </summary>
        internal static string BinaryOperatorNotSupported
        {
            get { return GetString("BinaryOperatorNotSupported"); }
        }

        /// <summary>
        /// A binary operator with incompatible types was detected. Found operand types '{0}' and '{1}' for operator kind '{2}'.
        /// </summary>
        internal static string FormatBinaryOperatorNotSupported(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("BinaryOperatorNotSupported"), p0, p1, p2);
        }

        /// <summary>
        /// Queries can not be applied to a response content of type '{0}'. The response content must be an ObjectContent.
        /// </summary>
        internal static string QueryingRequiresObjectContent
        {
            get { return GetString("QueryingRequiresObjectContent"); }
        }

        /// <summary>
        /// Queries can not be applied to a response content of type '{0}'. The response content must be an ObjectContent.
        /// </summary>
        internal static string FormatQueryingRequiresObjectContent(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("QueryingRequiresObjectContent"), p0);
        }

        /// <summary>
        /// The Any/All nesting limit of '{0}' has been exceeded. '{1}' can be configured on ODataQuerySettings or EnableQueryAttribute.
        /// </summary>
        internal static string MaxAnyAllExpressionLimitExceeded
        {
            get { return GetString("MaxAnyAllExpressionLimitExceeded"); }
        }

        /// <summary>
        /// The Any/All nesting limit of '{0}' has been exceeded. '{1}' can be configured on ODataQuerySettings or EnableQueryAttribute.
        /// </summary>
        internal static string FormatMaxAnyAllExpressionLimitExceeded(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MaxAnyAllExpressionLimitExceeded"), p0, p1);
        }

        /// <summary>
        /// The property '{0}' on type '{1}' returned a null value. The input stream contains collection items which cannot be added if the instance is null.
        /// </summary>
        internal static string CannotAddToNullCollection
        {
            get { return GetString("CannotAddToNullCollection"); }
        }

        /// <summary>
        /// The property '{0}' on type '{1}' returned a null value. The input stream contains collection items which cannot be added if the instance is null.
        /// </summary>
        internal static string FormatCannotAddToNullCollection(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotAddToNullCollection"), p0, p1);
        }

        /// <summary>
        /// The type '{0}' of the property '{1}' on type '{2}' must be a collection.
        /// </summary>
        internal static string PropertyIsNotCollection
        {
            get { return GetString("PropertyIsNotCollection"); }
        }

        /// <summary>
        /// The type '{0}' of the property '{1}' on type '{2}' must be a collection.
        /// </summary>
        internal static string FormatPropertyIsNotCollection(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PropertyIsNotCollection"), p0, p1, p2);
        }

        /// <summary>
        /// The value of the property '{0}' on type '{1}' is an array. Consider adding a setter for the property.
        /// </summary>
        internal static string GetOnlyCollectionCannotBeArray
        {
            get { return GetString("GetOnlyCollectionCannotBeArray"); }
        }

        /// <summary>
        /// The value of the property '{0}' on type '{1}' is an array. Consider adding a setter for the property.
        /// </summary>
        internal static string FormatGetOnlyCollectionCannotBeArray(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("GetOnlyCollectionCannotBeArray"), p0, p1);
        }

        /// <summary>
        /// The URI segment '{0}' is invalid after the segment '{1}'.
        /// </summary>
        internal static string InvalidPathSegment
        {
            get { return GetString("InvalidPathSegment"); }
        }

        /// <summary>
        /// The URI segment '{0}' is invalid after the segment '{1}'.
        /// </summary>
        internal static string FormatInvalidPathSegment(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidPathSegment"), p0, p1);
        }

        /// <summary>
        /// The last segment of the request URI '{0}' was not recognized as an OData action.
        /// </summary>
        internal static string RequestNotActionInvocation
        {
            get { return GetString("RequestNotActionInvocation"); }
        }

        /// <summary>
        /// The last segment of the request URI '{0}' was not recognized as an OData action.
        /// </summary>
        internal static string FormatRequestNotActionInvocation(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RequestNotActionInvocation"), p0);
        }

        /// <summary>
        /// No HTTP resource was found that matches the request URI '{0}'.
        /// </summary>
        internal static string NoMatchingResource
        {
            get { return GetString("NoMatchingResource"); }
        }

        /// <summary>
        /// No HTTP resource was found that matches the request URI '{0}'.
        /// </summary>
        internal static string FormatNoMatchingResource(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoMatchingResource"), p0);
        }

        /// <summary>
        /// No routing convention was found to select an action for the OData path with template '{0}'.
        /// </summary>
        internal static string NoRoutingHandlerToSelectAction
        {
            get { return GetString("NoRoutingHandlerToSelectAction"); }
        }

        /// <summary>
        /// No routing convention was found to select an action for the OData path with template '{0}'.
        /// </summary>
        internal static string FormatNoRoutingHandlerToSelectAction(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoRoutingHandlerToSelectAction"), p0);
        }

        /// <summary>
        /// Cannot use Delta of type '{0}' on an entity of type '{1}'.
        /// </summary>
        internal static string DeltaTypeMismatch
        {
            get { return GetString("DeltaTypeMismatch"); }
        }

        /// <summary>
        /// Cannot use Delta of type '{0}' on an entity of type '{1}'.
        /// </summary>
        internal static string FormatDeltaTypeMismatch(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DeltaTypeMismatch"), p0, p1);
        }

        /// <summary>
        /// The actual entity type '{0}' is not assignable to the expected type '{1}'.
        /// </summary>
        internal static string DeltaEntityTypeNotAssignable
        {
            get { return GetString("DeltaEntityTypeNotAssignable"); }
        }

        /// <summary>
        /// The actual entity type '{0}' is not assignable to the expected type '{1}'.
        /// </summary>
        internal static string FormatDeltaEntityTypeNotAssignable(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DeltaEntityTypeNotAssignable"), p0, p1);
        }

        /// <summary>
        /// Arithmetic operator '{0}' is not allowed. To allow it, set the '{1}' property on EnableQueryAttribute or QueryValidationSettings.
        /// </summary>
        internal static string NotAllowedArithmeticOperator
        {
            get { return GetString("NotAllowedArithmeticOperator"); }
        }

        /// <summary>
        /// Arithmetic operator '{0}' is not allowed. To allow it, set the '{1}' property on EnableQueryAttribute or QueryValidationSettings.
        /// </summary>
        internal static string FormatNotAllowedArithmeticOperator(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NotAllowedArithmeticOperator"), p0, p1);
        }

        /// <summary>
        /// Function '{0}' is not allowed. To allow it, set the '{1}' property on EnableQueryAttribute or QueryValidationSettings.
        /// </summary>
        internal static string NotAllowedFunction
        {
            get { return GetString("NotAllowedFunction"); }
        }

        /// <summary>
        /// Function '{0}' is not allowed. To allow it, set the '{1}' property on EnableQueryAttribute or QueryValidationSettings.
        /// </summary>
        internal static string FormatNotAllowedFunction(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NotAllowedFunction"), p0, p1);
        }

        /// <summary>
        /// Logical operator '{0}' is not allowed. To allow it, set the '{1}' property on EnableQueryAttribute or QueryValidationSettings.
        /// </summary>
        internal static string NotAllowedLogicalOperator
        {
            get { return GetString("NotAllowedLogicalOperator"); }
        }

        /// <summary>
        /// Logical operator '{0}' is not allowed. To allow it, set the '{1}' property on EnableQueryAttribute or QueryValidationSettings.
        /// </summary>
        internal static string FormatNotAllowedLogicalOperator(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NotAllowedLogicalOperator"), p0, p1);
        }

        /// <summary>
        /// Order by '{0}' is not allowed. To allow it, set the '{1}' property on EnableQueryAttribute or QueryValidationSettings.
        /// </summary>
        internal static string NotAllowedOrderByProperty
        {
            get { return GetString("NotAllowedOrderByProperty"); }
        }

        /// <summary>
        /// Order by '{0}' is not allowed. To allow it, set the '{1}' property on EnableQueryAttribute or QueryValidationSettings.
        /// </summary>
        internal static string FormatNotAllowedOrderByProperty(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NotAllowedOrderByProperty"), p0, p1);
        }

        /// <summary>
        /// Query option '{0}' is not allowed. To allow it, set the '{1}' property on EnableQueryAttribute or QueryValidationSettings.
        /// </summary>
        internal static string NotAllowedQueryOption
        {
            get { return GetString("NotAllowedQueryOption"); }
        }

        /// <summary>
        /// Query option '{0}' is not allowed. To allow it, set the '{1}' property on EnableQueryAttribute or QueryValidationSettings.
        /// </summary>
        internal static string FormatNotAllowedQueryOption(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NotAllowedQueryOption"), p0, p1);
        }

        /// <summary>
        /// The limit of '{0}' for {1} query has been exceeded. The value from the incoming request is '{2}'.
        /// </summary>
        internal static string SkipTopLimitExceeded
        {
            get { return GetString("SkipTopLimitExceeded"); }
        }

        /// <summary>
        /// The limit of '{0}' for {1} query has been exceeded. The value from the incoming request is '{2}'.
        /// </summary>
        internal static string FormatSkipTopLimitExceeded(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("SkipTopLimitExceeded"), p0, p1, p2);
        }

        /// <summary>
        /// The related entity set could not be found from the OData path. The related entity set is required to serialize the payload.
        /// </summary>
        internal static string EntitySetMissingDuringSerialization
        {
            get { return GetString("EntitySetMissingDuringSerialization"); }
        }

        /// <summary>
        /// The related entity set could not be found from the OData path. The related entity set is required to serialize the payload.
        /// </summary>
        internal static string FormatEntitySetMissingDuringSerialization()
        {
            return GetString("EntitySetMissingDuringSerialization");
        }

        /// <summary>
        /// The ODataMediaTypeFormatter must be able to determine the metadata URL for a request in order to serialize the response.
        /// </summary>
        internal static string UnableToDetermineMetadataUrl
        {
            get { return GetString("UnableToDetermineMetadataUrl"); }
        }

        /// <summary>
        /// The ODataMediaTypeFormatter must be able to determine the metadata URL for a request in order to serialize the response.
        /// </summary>
        internal static string FormatUnableToDetermineMetadataUrl()
        {
            return GetString("UnableToDetermineMetadataUrl");
        }

        /// <summary>
        /// The operation cannot be completed because no ODataPath is available for the request.
        /// </summary>
        internal static string ODataPathMissing
        {
            get { return GetString("ODataPathMissing"); }
        }

        /// <summary>
        /// The operation cannot be completed because no ODataPath is available for the request.
        /// </summary>
        internal static string FormatODataPathMissing()
        {
            return GetString("ODataPathMissing");
        }

        /// <summary>
        /// Multiple '$it' nodes are not supported in '$orderby'.
        /// </summary>
        internal static string OrderByDuplicateIt
        {
            get { return GetString("OrderByDuplicateIt"); }
        }

        /// <summary>
        /// Multiple '$it' nodes are not supported in '$orderby'.
        /// </summary>
        internal static string FormatOrderByDuplicateIt()
        {
            return GetString("OrderByDuplicateIt");
        }

        /// <summary>
        /// The given model does not contain the type '{0}'.
        /// </summary>
        internal static string ClrTypeNotInModel
        {
            get { return GetString("ClrTypeNotInModel"); }
        }

        /// <summary>
        /// The given model does not contain the type '{0}'.
        /// </summary>
        internal static string FormatClrTypeNotInModel(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ClrTypeNotInModel"), p0);
        }

        /// <summary>
        /// The OData formatter requires an attached request in order to deserialize. Controller classes must derive from ODataController or be marked with ODataFormattingAttribute. Custom parameter bindings must call GetPerRequestFormatterInstance on each formatter and use these per-request instances.
        /// </summary>
        internal static string ReadFromStreamAsyncMustHaveRequest
        {
            get { return GetString("ReadFromStreamAsyncMustHaveRequest"); }
        }

        /// <summary>
        /// The OData formatter requires an attached request in order to deserialize. Controller classes must derive from ODataController or be marked with ODataFormattingAttribute. Custom parameter bindings must call GetPerRequestFormatterInstance on each formatter and use these per-request instances.
        /// </summary>
        internal static string FormatReadFromStreamAsyncMustHaveRequest()
        {
            return GetString("ReadFromStreamAsyncMustHaveRequest");
        }

        /// <summary>
        /// The request must have an associated EDM model. Consider using the extension method HttpConfiguration.Routes.MapODataServiceRoute to register a route that parses the OData URI and attaches the model information.
        /// </summary>
        internal static string RequestMustHaveModel
        {
            get { return GetString("RequestMustHaveModel"); }
        }

        /// <summary>
        /// The request must have an associated EDM model. Consider using the extension method HttpConfiguration.Routes.MapODataServiceRoute to register a route that parses the OData URI and attaches the model information.
        /// </summary>
        internal static string FormatRequestMustHaveModel()
        {
            return GetString("RequestMustHaveModel");
        }

        /// <summary>
        /// A model is required for querying. Consider implementing the EnableQueryAttribute.GetModel method never to return a null value.
        /// </summary>
        internal static string QueryGetModelMustNotReturnNull
        {
            get { return GetString("QueryGetModelMustNotReturnNull"); }
        }

        /// <summary>
        /// A model is required for querying. Consider implementing the EnableQueryAttribute.GetModel method never to return a null value.
        /// </summary>
        internal static string FormatQueryGetModelMustNotReturnNull()
        {
            return GetString("QueryGetModelMustNotReturnNull");
        }

        /// <summary>
        /// The request must have an associated OData route name. Consider using the extension request.ODataProperties().RouteName to set a route name.
        /// </summary>
        internal static string RequestMustHaveODataRouteName
        {
            get { return GetString("RequestMustHaveODataRouteName"); }
        }

        /// <summary>
        /// The request must have an associated OData route name. Consider using the extension request.ODataProperties().RouteName to set a route name.
        /// </summary>
        internal static string FormatRequestMustHaveODataRouteName()
        {
            return GetString("RequestMustHaveODataRouteName");
        }

        /// <summary>
        /// Cannot change multiplicity of the collection navigation property '{0}'.
        /// </summary>
        internal static string ManyNavigationPropertiesCannotBeChanged
        {
            get { return GetString("ManyNavigationPropertiesCannotBeChanged"); }
        }

        /// <summary>
        /// Cannot change multiplicity of the collection navigation property '{0}'.
        /// </summary>
        internal static string FormatManyNavigationPropertiesCannotBeChanged(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ManyNavigationPropertiesCannotBeChanged"), p0);
        }

        /// <summary>
        /// The ODataMediaTypeFormatter was unable to determine the base URI for the request. The request must be processed by an OData route for the OData formatter to serialize the response.
        /// </summary>
        internal static string UnableToDetermineBaseUrl
        {
            get { return GetString("UnableToDetermineBaseUrl"); }
        }

        /// <summary>
        /// The ODataMediaTypeFormatter was unable to determine the base URI for the request. The request must be processed by an OData route for the OData formatter to serialize the response.
        /// </summary>
        internal static string FormatUnableToDetermineBaseUrl()
        {
            return GetString("UnableToDetermineBaseUrl");
        }

        /// <summary>
        /// {0} cannot write an object of type '{1}'.
        /// </summary>
        internal static string CannotWriteType
        {
            get { return GetString("CannotWriteType"); }
        }

        /// <summary>
        /// {0} cannot write an object of type '{1}'.
        /// </summary>
        internal static string FormatCannotWriteType(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotWriteType"), p0, p1);
        }

        /// <summary>
        /// The 'RootElementName' property is required on '{0}'.
        /// </summary>
        internal static string RootElementNameMissing
        {
            get { return GetString("RootElementNameMissing"); }
        }

        /// <summary>
        /// The 'RootElementName' property is required on '{0}'.
        /// </summary>
        internal static string FormatRootElementNameMissing(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RootElementNameMissing"), p0);
        }

        /// <summary>
        /// '{0}' cannot be deserialized using the {1}.
        /// </summary>
        internal static string TypeCannotBeDeserialized
        {
            get { return GetString("TypeCannotBeDeserialized"); }
        }

        /// <summary>
        /// '{0}' cannot be deserialized using the {1}.
        /// </summary>
        internal static string FormatTypeCannotBeDeserialized(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TypeCannotBeDeserialized"), p0, p1);
        }

        /// <summary>
        /// Cannot find the entity type '{0}' in the model.
        /// </summary>
        internal static string EntityTypeNotInModel
        {
            get { return GetString("EntityTypeNotInModel"); }
        }

        /// <summary>
        /// Cannot find the entity type '{0}' in the model.
        /// </summary>
        internal static string FormatEntityTypeNotInModel(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EntityTypeNotInModel"), p0);
        }

        /// <summary>
        /// Cannot find the complex type '{0}' in the model.
        /// </summary>
        internal static string ComplexTypeNotInModel
        {
            get { return GetString("ComplexTypeNotInModel"); }
        }

        /// <summary>
        /// Cannot find the complex type '{0}' in the model.
        /// </summary>
        internal static string FormatComplexTypeNotInModel(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ComplexTypeNotInModel"), p0);
        }

        /// <summary>
        /// The EDM model is missing on the read context. The model is required on the read context to deserialize the payload.
        /// </summary>
        internal static string ModelMissingFromReadContext
        {
            get { return GetString("ModelMissingFromReadContext"); }
        }

        /// <summary>
        /// The EDM model is missing on the read context. The model is required on the read context to deserialize the payload.
        /// </summary>
        internal static string FormatModelMissingFromReadContext()
        {
            return GetString("ModelMissingFromReadContext");
        }

        /// <summary>
        /// Cannot find navigation property '{0}' on the entity type '{1}'.
        /// </summary>
        internal static string NavigationPropertyNotfound
        {
            get { return GetString("NavigationPropertyNotfound"); }
        }

        /// <summary>
        /// Cannot find navigation property '{0}' on the entity type '{1}'.
        /// </summary>
        internal static string FormatNavigationPropertyNotfound(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NavigationPropertyNotfound"), p0, p1);
        }

        /// <summary>
        /// 'select' and 'expand' cannot be both null or empty.
        /// </summary>
        internal static string SelectExpandEmptyOrNull
        {
            get { return GetString("SelectExpandEmptyOrNull"); }
        }

        /// <summary>
        /// 'select' and 'expand' cannot be both null or empty.
        /// </summary>
        internal static string FormatSelectExpandEmptyOrNull()
        {
            return GetString("SelectExpandEmptyOrNull");
        }

        /// <summary>
        /// $select does not support selections of type '{0}'.
        /// </summary>
        internal static string SelectionTypeNotSupported
        {
            get { return GetString("SelectionTypeNotSupported"); }
        }

        /// <summary>
        /// $select does not support selections of type '{0}'.
        /// </summary>
        internal static string FormatSelectionTypeNotSupported(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("SelectionTypeNotSupported"), p0);
        }

        /// <summary>
        /// The type '{0}' is not an entity type. Only entity types support $select and $expand.
        /// </summary>
        internal static string SelectNonEntity
        {
            get { return GetString("SelectNonEntity"); }
        }

        /// <summary>
        /// The type '{0}' is not an entity type. Only entity types support $select and $expand.
        /// </summary>
        internal static string FormatSelectNonEntity(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("SelectNonEntity"), p0);
        }

        /// <summary>
        /// The EDM instance of type '{0}' is missing the property '{1}'.
        /// </summary>
        internal static string PropertyNotFound
        {
            get { return GetString("PropertyNotFound"); }
        }

        /// <summary>
        /// The EDM instance of type '{0}' is missing the property '{1}'.
        /// </summary>
        internal static string FormatPropertyNotFound(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PropertyNotFound"), p0, p1);
        }

        /// <summary>
        /// The EDM type of the object of type '{0}' is null. The EDM type of an {1} cannot be null.
        /// </summary>
        internal static string EdmTypeCannotBeNull
        {
            get { return GetString("EdmTypeCannotBeNull"); }
        }

        /// <summary>
        /// The EDM type of the object of type '{0}' is null. The EDM type of an {1} cannot be null.
        /// </summary>
        internal static string FormatEdmTypeCannotBeNull(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EdmTypeCannotBeNull"), p0, p1);
        }

        /// <summary>
        /// The property 'EdmObject' of {0} cannot be null.
        /// </summary>
        internal static string EdmObjectNull
        {
            get { return GetString("EdmObjectNull"); }
        }

        /// <summary>
        /// The property 'EdmObject' of {0} cannot be null.
        /// </summary>
        internal static string FormatEdmObjectNull(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EdmObjectNull"), p0);
        }

        /// <summary>
        /// The batch request must have '{0}' as the media type.
        /// </summary>
        internal static string BatchRequestInvalidMediaType
        {
            get { return GetString("BatchRequestInvalidMediaType"); }
        }

        /// <summary>
        /// The batch request must have '{0}' as the media type.
        /// </summary>
        internal static string FormatBatchRequestInvalidMediaType(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("BatchRequestInvalidMediaType"), p0);
        }

        /// <summary>
        /// The batch request must have a boundary specification in the "Content-Type" header.
        /// </summary>
        internal static string BatchRequestMissingBoundary
        {
            get { return GetString("BatchRequestMissingBoundary"); }
        }

        /// <summary>
        /// The batch request must have a boundary specification in the "Content-Type" header.
        /// </summary>
        internal static string FormatBatchRequestMissingBoundary()
        {
            return GetString("BatchRequestMissingBoundary");
        }

        /// <summary>
        /// The batch request must have a "Content-Type" header.
        /// </summary>
        internal static string BatchRequestMissingContentType
        {
            get { return GetString("BatchRequestMissingContentType"); }
        }

        /// <summary>
        /// The batch request must have a "Content-Type" header.
        /// </summary>
        internal static string FormatBatchRequestMissingContentType()
        {
            return GetString("BatchRequestMissingContentType");
        }

        /// <summary>
        /// The current batch reader state '{0}' is invalid. The expected state is '{1}'.
        /// </summary>
        internal static string InvalidBatchReaderState
        {
            get { return GetString("InvalidBatchReaderState"); }
        }

        /// <summary>
        /// The current batch reader state '{0}' is invalid. The expected state is '{1}'.
        /// </summary>
        internal static string FormatInvalidBatchReaderState(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidBatchReaderState"), p0, p1);
        }

        /// <summary>
        /// The 'Content' property on the batch request cannot be null.
        /// </summary>
        internal static string BatchRequestMissingContent
        {
            get { return GetString("BatchRequestMissingContent"); }
        }

        /// <summary>
        /// The 'Content' property on the batch request cannot be null.
        /// </summary>
        internal static string FormatBatchRequestMissingContent()
        {
            return GetString("BatchRequestMissingContent");
        }

        /// <summary>
        /// '{0}' should be less than or equal to '{1}'.
        /// </summary>
        internal static string InvalidExpansionDepthValue
        {
            get { return GetString("InvalidExpansionDepthValue"); }
        }

        /// <summary>
        /// '{0}' should be less than or equal to '{1}'.
        /// </summary>
        internal static string FormatInvalidExpansionDepthValue(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidExpansionDepthValue"), p0, p1);
        }

        /// <summary>
        /// The request includes a $expand path which is too deep. The maximum depth allowed is {0}. To increase the limit, set the '{1}' property on EnableQueryAttribute or ODataValidationSettings.
        /// </summary>
        internal static string MaxExpandDepthExceeded
        {
            get { return GetString("MaxExpandDepthExceeded"); }
        }

        /// <summary>
        /// The request includes a $expand path which is too deep. The maximum depth allowed is {0}. To increase the limit, set the '{1}' property on EnableQueryAttribute or ODataValidationSettings.
        /// </summary>
        internal static string FormatMaxExpandDepthExceeded(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MaxExpandDepthExceeded"), p0, p1);
        }

        /// <summary>
        /// The requested resource is not a collection. Query options $filter, $orderby, $count, $skip, and $top can be applied only on collections.
        /// </summary>
        internal static string NonSelectExpandOnSingleEntity
        {
            get { return GetString("NonSelectExpandOnSingleEntity"); }
        }

        /// <summary>
        /// The requested resource is not a collection. Query options $filter, $orderby, $count, $skip, and $top can be applied only on collections.
        /// </summary>
        internal static string FormatNonSelectExpandOnSingleEntity()
        {
            return GetString("NonSelectExpandOnSingleEntity");
        }

        /// <summary>
        /// The action '{0}' on controller '{1}' returned a {2} containing more than one element. {2} must have zero or one elements.
        /// </summary>
        internal static string SingleResultHasMoreThanOneEntity
        {
            get { return GetString("SingleResultHasMoreThanOneEntity"); }
        }

        /// <summary>
        /// The action '{0}' on controller '{1}' returned a {2} containing more than one element. {2} must have zero or one elements.
        /// </summary>
        internal static string FormatSingleResultHasMoreThanOneEntity(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("SingleResultHasMoreThanOneEntity"), p0, p1, p2);
        }

        /// <summary>
        /// A path within the select or expand query option is not supported.
        /// </summary>
        internal static string UnsupportedSelectExpandPath
        {
            get { return GetString("UnsupportedSelectExpandPath"); }
        }

        /// <summary>
        /// A path within the select or expand query option is not supported.
        /// </summary>
        internal static string FormatUnsupportedSelectExpandPath()
        {
            return GetString("UnsupportedSelectExpandPath");
        }

        /// <summary>
        /// The property 'Url' of {0} cannot be null.
        /// </summary>
        internal static string UrlHelperNull
        {
            get { return GetString("UrlHelperNull"); }
        }

        /// <summary>
        /// The property 'Url' of {0} cannot be null.
        /// </summary>
        internal static string FormatUrlHelperNull(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UrlHelperNull"), p0);
        }

        /// <summary>
        /// Cannot get property '{0}' of a null EDM object of type '{1}'.
        /// </summary>
        internal static string EdmComplexObjectNullRef
        {
            get { return GetString("EdmComplexObjectNullRef"); }
        }

        /// <summary>
        /// Cannot get property '{0}' of a null EDM object of type '{1}'.
        /// </summary>
        internal static string FormatEdmComplexObjectNullRef(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EdmComplexObjectNullRef"), p0, p1);
        }

        /// <summary>
        /// The EDM type '{0}' of kind '{1}' is not supported.
        /// </summary>
        internal static string UnsupportedEdmType
        {
            get { return GetString("UnsupportedEdmType"); }
        }

        /// <summary>
        /// The EDM type '{0}' of kind '{1}' is not supported.
        /// </summary>
        internal static string FormatUnsupportedEdmType(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnsupportedEdmType"), p0, p1);
        }

        /// <summary>
        /// The element type '{0}' of the given collection type '{1}' is not of the type '{2}'.
        /// </summary>
        internal static string UnexpectedElementType
        {
            get { return GetString("UnexpectedElementType"); }
        }

        /// <summary>
        /// The element type '{0}' of the given collection type '{1}' is not of the type '{2}'.
        /// </summary>
        internal static string FormatUnexpectedElementType(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnexpectedElementType"), p0, p1, p2);
        }

        /// <summary>
        /// The action '{0}' is not bound to an entity. Only actions that are bound to entities can have action links.
        /// </summary>
        internal static string ActionNotBoundToEntity
        {
            get { return GetString("ActionNotBoundToEntity"); }
        }

        /// <summary>
        /// The action '{0}' is not bound to an entity. Only actions that are bound to entities can have action links.
        /// </summary>
        internal static string FormatActionNotBoundToEntity(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ActionNotBoundToEntity"), p0);
        }

        /// <summary>
        /// {0} is not an entity type. Only entity types are supported.
        /// </summary>
        internal static string TypeMustBeEntity
        {
            get { return GetString("TypeMustBeEntity"); }
        }

        /// <summary>
        /// {0} is not an entity type. Only entity types are supported.
        /// </summary>
        internal static string FormatTypeMustBeEntity(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TypeMustBeEntity"), p0);
        }

        /// <summary>
        /// The edit link builder for the entity set '{0}' returned null. An edit link is required for the location header.
        /// </summary>
        internal static string EditLinkNullForLocationHeader
        {
            get { return GetString("EditLinkNullForLocationHeader"); }
        }

        /// <summary>
        /// The edit link builder for the entity set '{0}' returned null. An edit link is required for the location header.
        /// </summary>
        internal static string FormatEditLinkNullForLocationHeader(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EditLinkNullForLocationHeader"), p0);
        }

        /// <summary>
        /// The query option is not bound to any CLR type. '{0}' is only supported with a query option bound to a CLR type.
        /// </summary>
        internal static string ApplyToOnUntypedQueryOption
        {
            get { return GetString("ApplyToOnUntypedQueryOption"); }
        }

        /// <summary>
        /// The query option is not bound to any CLR type. '{0}' is only supported with a query option bound to a CLR type.
        /// </summary>
        internal static string FormatApplyToOnUntypedQueryOption(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ApplyToOnUntypedQueryOption"), p0);
        }

        /// <summary>
        /// The property 'ElementClrType' of {0} cannot be null.
        /// </summary>
        internal static string ElementClrTypeNull
        {
            get { return GetString("ElementClrTypeNull"); }
        }

        /// <summary>
        /// The property 'ElementClrType' of {0} cannot be null.
        /// </summary>
        internal static string FormatElementClrTypeNull(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ElementClrTypeNull"), p0);
        }

        /// <summary>
        /// The type '{0}' of the property '{1}' on type '{2}' does not have a Clear method. Consider using a collection type that does have a Clear method, such as IList&lt;T&gt; or ICollection&lt;T&gt;.
        /// </summary>
        internal static string CollectionShouldHaveClearMethod
        {
            get { return GetString("CollectionShouldHaveClearMethod"); }
        }

        /// <summary>
        /// The type '{0}' of the property '{1}' on type '{2}' does not have a Clear method. Consider using a collection type that does have a Clear method, such as IList&lt;T&gt; or ICollection&lt;T&gt;.
        /// </summary>
        internal static string FormatCollectionShouldHaveClearMethod(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CollectionShouldHaveClearMethod"), p0, p1, p2);
        }

        /// <summary>
        /// The number of clauses in $orderby query option exceeded the maximum number allowed. The maximum number of $orderby clauses allowed is {0}.
        /// </summary>
        internal static string OrderByNodeCountExceeded
        {
            get { return GetString("OrderByNodeCountExceeded"); }
        }

        /// <summary>
        /// The number of clauses in $orderby query option exceeded the maximum number allowed. The maximum number of $orderby clauses allowed is {0}.
        /// </summary>
        internal static string FormatOrderByNodeCountExceeded(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("OrderByNodeCountExceeded"), p0);
        }

        /// <summary>
        /// The EDM type '{0}' is already declared as an entity type. Use the method 'ReturnsCollectionFromEntitySet' if the return type is an entity collection.
        /// </summary>
        internal static string ReturnEntityCollectionWithoutEntitySet
        {
            get { return GetString("ReturnEntityCollectionWithoutEntitySet"); }
        }

        /// <summary>
        /// The EDM type '{0}' is already declared as an entity type. Use the method 'ReturnsCollectionFromEntitySet' if the return type is an entity collection.
        /// </summary>
        internal static string FormatReturnEntityCollectionWithoutEntitySet(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ReturnEntityCollectionWithoutEntitySet"), p0);
        }

        /// <summary>
        /// The EDM type '{0}' is already declared as an entity type. Use the method 'ReturnsFromEntitySet' if the return type is an entity.
        /// </summary>
        internal static string ReturnEntityWithoutEntitySet
        {
            get { return GetString("ReturnEntityWithoutEntitySet"); }
        }

        /// <summary>
        /// The EDM type '{0}' is already declared as an entity type. Use the method 'ReturnsFromEntitySet' if the return type is an entity.
        /// </summary>
        internal static string FormatReturnEntityWithoutEntitySet(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ReturnEntityWithoutEntitySet"), p0);
        }

        /// <summary>
        /// Null collections cannot be serialized.
        /// </summary>
        internal static string NullCollectionsCannotBeSerialized
        {
            get { return GetString("NullCollectionsCannotBeSerialized"); }
        }

        /// <summary>
        /// Null collections cannot be serialized.
        /// </summary>
        internal static string FormatNullCollectionsCannotBeSerialized()
        {
            return GetString("NullCollectionsCannotBeSerialized");
        }

        /// <summary>
        /// Unterminated string literal at {0} in segment '{1}'.
        /// </summary>
        internal static string UnterminatedStringLiteral
        {
            get { return GetString("UnterminatedStringLiteral"); }
        }

        /// <summary>
        /// Unterminated string literal at {0} in segment '{1}'.
        /// </summary>
        internal static string FormatUnterminatedStringLiteral(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnterminatedStringLiteral"), p0, p1);
        }

        /// <summary>
        /// The count of single quotes in non-string literal '{0}' must be 0 or 2 in segment '{1}'.
        /// </summary>
        internal static string InvalidSingleQuoteCountForNonStringLiteral
        {
            get { return GetString("InvalidSingleQuoteCountForNonStringLiteral"); }
        }

        /// <summary>
        /// The count of single quotes in non-string literal '{0}' must be 0 or 2 in segment '{1}'.
        /// </summary>
        internal static string FormatInvalidSingleQuoteCountForNonStringLiteral(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidSingleQuoteCountForNonStringLiteral"), p0, p1);
        }

        /// <summary>
        /// The literal '{0}' has a bad format in segment '{1}'.
        /// </summary>
        internal static string LiteralHasABadFormat
        {
            get { return GetString("LiteralHasABadFormat"); }
        }

        /// <summary>
        /// The literal '{0}' has a bad format in segment '{1}'.
        /// </summary>
        internal static string FormatLiteralHasABadFormat(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("LiteralHasABadFormat"), p0, p1);
        }

        /// <summary>
        /// No key name was found at {0} in segment '{1}'.
        /// </summary>
        internal static string NoKeyNameFoundInSegment
        {
            get { return GetString("NoKeyNameFoundInSegment"); }
        }

        /// <summary>
        /// No key name was found at {0} in segment '{1}'.
        /// </summary>
        internal static string FormatNoKeyNameFoundInSegment(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoKeyNameFoundInSegment"), p0, p1);
        }

        /// <summary>
        /// No value for key '{0}' was found at {1} in segment '{2}'.
        /// </summary>
        internal static string NoValueLiteralFoundInSegment
        {
            get { return GetString("NoValueLiteralFoundInSegment"); }
        }

        /// <summary>
        /// No value for key '{0}' was found at {1} in segment '{2}'.
        /// </summary>
        internal static string FormatNoValueLiteralFoundInSegment(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoValueLiteralFoundInSegment"), p0, p1, p2);
        }

        /// <summary>
        /// Duplicate key '{0}' found in segment '{1}'.
        /// </summary>
        internal static string DuplicateKeyInSegment
        {
            get { return GetString("DuplicateKeyInSegment"); }
        }

        /// <summary>
        /// Duplicate key '{0}' found in segment '{1}'.
        /// </summary>
        internal static string FormatDuplicateKeyInSegment(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DuplicateKeyInSegment"), p0, p1);
        }

        /// <summary>
        /// A non-null request URI must be provided to determine if a '{0}' matches a given request or response message.
        /// </summary>
        internal static string NonNullUriRequiredForMediaTypeMapping
        {
            get { return GetString("NonNullUriRequiredForMediaTypeMapping"); }
        }

        /// <summary>
        /// A non-null request URI must be provided to determine if a '{0}' matches a given request or response message.
        /// </summary>
        internal static string FormatNonNullUriRequiredForMediaTypeMapping(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NonNullUriRequiredForMediaTypeMapping"), p0);
        }

        /// <summary>
        /// Parameter alias '{0}' in segment '{1}' is empty.
        /// </summary>
        internal static string EmptyParameterAlias
        {
            get { return GetString("EmptyParameterAlias"); }
        }

        /// <summary>
        /// Parameter alias '{0}' in segment '{1}' is empty.
        /// </summary>
        internal static string FormatEmptyParameterAlias(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EmptyParameterAlias"), p0, p1);
        }

        /// <summary>
        /// Parameter alias '{0}' in segment '{1}' does not start with '{{' or ends with '}}'.
        /// </summary>
        internal static string ParameterAliasMustBeInCurlyBraces
        {
            get { return GetString("ParameterAliasMustBeInCurlyBraces"); }
        }

        /// <summary>
        /// Parameter alias '{0}' in segment '{1}' does not start with '{{' or ends with '}}'.
        /// </summary>
        internal static string FormatParameterAliasMustBeInCurlyBraces(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ParameterAliasMustBeInCurlyBraces"), p0, p1);
        }

        /// <summary>
        /// Found an unresolved path segment '{0}' in the OData path template '{1}'.
        /// </summary>
        internal static string UnresolvedPathSegmentInTemplate
        {
            get { return GetString("UnresolvedPathSegmentInTemplate"); }
        }

        /// <summary>
        /// Found an unresolved path segment '{0}' in the OData path template '{1}'.
        /// </summary>
        internal static string FormatUnresolvedPathSegmentInTemplate(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnresolvedPathSegmentInTemplate"), p0, p1);
        }

        /// <summary>
        /// The given OData path template '{0}' is invalid.
        /// </summary>
        internal static string InvalidODataPathTemplate
        {
            get { return GetString("InvalidODataPathTemplate"); }
        }

        /// <summary>
        /// The given OData path template '{0}' is invalid.
        /// </summary>
        internal static string FormatInvalidODataPathTemplate(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidODataPathTemplate"), p0);
        }

        /// <summary>
        /// The path template '{0}' on the action '{1}' in controller '{2}' is not a valid OData path template. {3}
        /// </summary>
        internal static string InvalidODataRouteOnAction
        {
            get { return GetString("InvalidODataRouteOnAction"); }
        }

        /// <summary>
        /// The path template '{0}' on the action '{1}' in controller '{2}' is not a valid OData path template. {3}
        /// </summary>
        internal static string FormatInvalidODataRouteOnAction(object p0, object p1, object p2, object p3)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidODataRouteOnAction"), p0, p1, p2, p3);
        }

        /// <summary>
        /// The OData route prefix '{0}' on the controller '{1}' starts with a '/'. Route prefixes cannot start with a '/'.
        /// </summary>
        internal static string RoutePrefixStartsWithSlash
        {
            get { return GetString("RoutePrefixStartsWithSlash"); }
        }

        /// <summary>
        /// The OData route prefix '{0}' on the controller '{1}' starts with a '/'. Route prefixes cannot start with a '/'.
        /// </summary>
        internal static string FormatRoutePrefixStartsWithSlash(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RoutePrefixStartsWithSlash"), p0, p1);
        }

        /// <summary>
        /// The function '{0}' is not bound to an entity. Only actions that are bound to entities can have function links.
        /// </summary>
        internal static string FunctionNotBoundToEntity
        {
            get { return GetString("FunctionNotBoundToEntity"); }
        }

        /// <summary>
        /// The function '{0}' is not bound to an entity. Only actions that are bound to entities can have function links.
        /// </summary>
        internal static string FormatFunctionNotBoundToEntity(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("FunctionNotBoundToEntity"), p0);
        }

        /// <summary>
        /// Found more than one action with name '{0}' bound to the same type '{1}'. Each bound action must have a different binding type or name.
        /// </summary>
        internal static string MoreThanOneOverloadActionBoundToSameTypeFound
        {
            get { return GetString("MoreThanOneOverloadActionBoundToSameTypeFound"); }
        }

        /// <summary>
        /// Found more than one action with name '{0}' bound to the same type '{1}'. Each bound action must have a different binding type or name.
        /// </summary>
        internal static string FormatMoreThanOneOverloadActionBoundToSameTypeFound(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MoreThanOneOverloadActionBoundToSameTypeFound"), p0, p1);
        }

        /// <summary>
        /// Found more than one unbound action with name '{0}'. Each unbound action must have an unique action name.
        /// </summary>
        internal static string MoreThanOneUnboundActionFound
        {
            get { return GetString("MoreThanOneUnboundActionFound"); }
        }

        /// <summary>
        /// Found more than one unbound action with name '{0}'. Each unbound action must have an unique action name.
        /// </summary>
        internal static string FormatMoreThanOneUnboundActionFound(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MoreThanOneUnboundActionFound"), p0);
        }

        /// <summary>
        /// Invalid EntitySetPath detected. '{0}' is not a valid entity set path for procedure '{1}'.
        /// </summary>
        internal static string ProcedureHasInvalidEntitySetPath
        {
            get { return GetString("ProcedureHasInvalidEntitySetPath"); }
        }

        /// <summary>
        /// Invalid EntitySetPath detected. '{0}' is not a valid entity set path for procedure '{1}'.
        /// </summary>
        internal static string FormatProcedureHasInvalidEntitySetPath(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ProcedureHasInvalidEntitySetPath"), p0, p1);
        }

        /// <summary>
        /// The function parameter '{0}' cannot be found.
        /// </summary>
        internal static string FunctionParameterNotFound
        {
            get { return GetString("FunctionParameterNotFound"); }
        }

        /// <summary>
        /// The function parameter '{0}' cannot be found.
        /// </summary>
        internal static string FormatFunctionParameterNotFound(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("FunctionParameterNotFound"), p0);
        }

        /// <summary>
        /// The ETag handler set in the configuration property is of type '{0}', which does not implement IETagHandler.
        /// </summary>
        internal static string InvalidETagHandler
        {
            get { return GetString("InvalidETagHandler"); }
        }

        /// <summary>
        /// The ETag handler set in the configuration property is of type '{0}', which does not implement IETagHandler.
        /// </summary>
        internal static string FormatInvalidETagHandler(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidETagHandler"), p0);
        }

        /// <summary>
        /// The ETag handler set in the configuration property must not be null.
        /// </summary>
        internal static string NullETagHandler
        {
            get { return GetString("NullETagHandler"); }
        }

        /// <summary>
        /// The ETag handler set in the configuration property must not be null.
        /// </summary>
        internal static string FormatNullETagHandler()
        {
            return GetString("NullETagHandler");
        }

        /// <summary>
        /// The time zone info set in the configuration property is of type '{0}'. The time zone info type must be type '{1}'.
        /// </summary>
        internal static string InvalidTimeZoneInfo
        {
            get { return GetString("InvalidTimeZoneInfo"); }
        }

        /// <summary>
        /// The time zone info set in the configuration property is of type '{0}'. The time zone info type must be type '{1}'.
        /// </summary>
        internal static string FormatInvalidTimeZoneInfo(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidTimeZoneInfo"), p0, p1);
        }

        /// <summary>
        /// Cannot apply {0} of '{1}' to {2} of '{3}'.
        /// </summary>
        internal static string CannotApplyETagOfT
        {
            get { return GetString("CannotApplyETagOfT"); }
        }

        /// <summary>
        /// Cannot apply {0} of '{1}' to {2} of '{3}'.
        /// </summary>
        internal static string FormatCannotApplyETagOfT(object p0, object p1, object p2, object p3)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotApplyETagOfT"), p0, p1, p2, p3);
        }

        /// <summary>
        /// The ETag is not well-formed.
        /// </summary>
        internal static string ETagNotWellFormed
        {
            get { return GetString("ETagNotWellFormed"); }
        }

        /// <summary>
        /// The ETag is not well-formed.
        /// </summary>
        internal static string FormatETagNotWellFormed()
        {
            return GetString("ETagNotWellFormed");
        }

        /// <summary>
        /// The property '{0}' cannot be used in the $filter query option.
        /// </summary>
        internal static string NotFilterablePropertyUsedInFilter
        {
            get { return GetString("NotFilterablePropertyUsedInFilter"); }
        }

        /// <summary>
        /// The property '{0}' cannot be used in the $filter query option.
        /// </summary>
        internal static string FormatNotFilterablePropertyUsedInFilter(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NotFilterablePropertyUsedInFilter"), p0);
        }

        /// <summary>
        /// The property '{0}' cannot be used in the $orderby query option.
        /// </summary>
        internal static string NotSortablePropertyUsedInOrderBy
        {
            get { return GetString("NotSortablePropertyUsedInOrderBy"); }
        }

        /// <summary>
        /// The property '{0}' cannot be used in the $orderby query option.
        /// </summary>
        internal static string FormatNotSortablePropertyUsedInOrderBy(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NotSortablePropertyUsedInOrderBy"), p0);
        }

        /// <summary>
        /// The property '{0}' cannot be used in the $expand query option.
        /// </summary>
        internal static string NotExpandablePropertyUsedInExpand
        {
            get { return GetString("NotExpandablePropertyUsedInExpand"); }
        }

        /// <summary>
        /// The property '{0}' cannot be used in the $expand query option.
        /// </summary>
        internal static string FormatNotExpandablePropertyUsedInExpand(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NotExpandablePropertyUsedInExpand"), p0);
        }

        /// <summary>
        /// The property '{0}' cannot be used for navigation.
        /// </summary>
        internal static string NotNavigablePropertyUsedInNavigation
        {
            get { return GetString("NotNavigablePropertyUsedInNavigation"); }
        }

        /// <summary>
        /// The property '{0}' cannot be used for navigation.
        /// </summary>
        internal static string FormatNotNavigablePropertyUsedInNavigation(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NotNavigablePropertyUsedInNavigation"), p0);
        }

        /// <summary>
        /// The property '{0}' cannot be used for $count.
        /// </summary>
        internal static string NotCountablePropertyUsedForCount
        {
            get { return GetString("NotCountablePropertyUsedForCount"); }
        }

        /// <summary>
        /// The property '{0}' cannot be used for $count.
        /// </summary>
        internal static string FormatNotCountablePropertyUsedForCount(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NotCountablePropertyUsedForCount"), p0);
        }

        /// <summary>
        /// The entity '{0}' does not have a key defined.
        /// </summary>
        internal static string EntityTypeDoesntHaveKeyDefined
        {
            get { return GetString("EntityTypeDoesntHaveKeyDefined"); }
        }

        /// <summary>
        /// The entity '{0}' does not have a key defined.
        /// </summary>
        internal static string FormatEntityTypeDoesntHaveKeyDefined(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EntityTypeDoesntHaveKeyDefined"), p0);
        }

        /// <summary>
        /// The mapper provider must return a valid '{0}' instance for the given '{1}' IEdmType.
        /// </summary>
        internal static string InvalidPropertyMapper
        {
            get { return GetString("InvalidPropertyMapper"); }
        }

        /// <summary>
        /// The mapper provider must return a valid '{0}' instance for the given '{1}' IEdmType.
        /// </summary>
        internal static string FormatInvalidPropertyMapper(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidPropertyMapper"), p0, p1);
        }

        /// <summary>
        /// The key mapping for the property '{0}' can't be null or empty.
        /// </summary>
        internal static string InvalidPropertyMapping
        {
            get { return GetString("InvalidPropertyMapping"); }
        }

        /// <summary>
        /// The key mapping for the property '{0}' can't be null or empty.
        /// </summary>
        internal static string FormatInvalidPropertyMapping(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidPropertyMapping"), p0);
        }

        /// <summary>
        /// '{0}' is not a valid singleton name. The singleton name cannot contain '.'.
        /// </summary>
        internal static string InvalidSingletonName
        {
            get { return GetString("InvalidSingletonName"); }
        }

        /// <summary>
        /// '{0}' is not a valid singleton name. The singleton name cannot contain '.'.
        /// </summary>
        internal static string FormatInvalidSingletonName(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidSingletonName"), p0);
        }

        /// <summary>
        /// The singleton '{0}' was already configured with a different EntityType ('{1}').
        /// </summary>
        internal static string SingletonAlreadyConfiguredDifferentEntityType
        {
            get { return GetString("SingletonAlreadyConfiguredDifferentEntityType"); }
        }

        /// <summary>
        /// The singleton '{0}' was already configured with a different EntityType ('{1}').
        /// </summary>
        internal static string FormatSingletonAlreadyConfiguredDifferentEntityType(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("SingletonAlreadyConfiguredDifferentEntityType"), p0, p1);
        }

        /// <summary>
        /// The entity set name '{0}' was already configured as a singleton.
        /// </summary>
        internal static string EntitySetNameAlreadyConfiguredAsSingleton
        {
            get { return GetString("EntitySetNameAlreadyConfiguredAsSingleton"); }
        }

        /// <summary>
        /// The entity set name '{0}' was already configured as a singleton.
        /// </summary>
        internal static string FormatEntitySetNameAlreadyConfiguredAsSingleton(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EntitySetNameAlreadyConfiguredAsSingleton"), p0);
        }

        /// <summary>
        /// The singleton name '{0}' was already configured as an entity set.
        /// </summary>
        internal static string SingletonNameAlreadyConfiguredAsEntitySet
        {
            get { return GetString("SingletonNameAlreadyConfiguredAsEntitySet"); }
        }

        /// <summary>
        /// The singleton name '{0}' was already configured as an entity set.
        /// </summary>
        internal static string FormatSingletonNameAlreadyConfiguredAsEntitySet(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("SingletonNameAlreadyConfiguredAsEntitySet"), p0);
        }

        /// <summary>
        /// The related entity set or singleton cannot be found from the OData path. The related entity set or singleton is required to serialize the payload.
        /// </summary>
        internal static string NavigationSourceMissingDuringSerialization
        {
            get { return GetString("NavigationSourceMissingDuringSerialization"); }
        }

        /// <summary>
        /// The related entity set or singleton cannot be found from the OData path. The related entity set or singleton is required to serialize the payload.
        /// </summary>
        internal static string FormatNavigationSourceMissingDuringSerialization()
        {
            return GetString("NavigationSourceMissingDuringSerialization");
        }

        /// <summary>
        /// The related entity set or singleton cannot be found from the OData path. The related entity set or singleton is required to deserialize the payload.
        /// </summary>
        internal static string NavigationSourceMissingDuringDeserialization
        {
            get { return GetString("NavigationSourceMissingDuringDeserialization"); }
        }

        /// <summary>
        /// The related entity set or singleton cannot be found from the OData path. The related entity set or singleton is required to deserialize the payload.
        /// </summary>
        internal static string FormatNavigationSourceMissingDuringDeserialization()
        {
            return GetString("NavigationSourceMissingDuringDeserialization");
        }

        /// <summary>
        /// The object has not yet been initialized. Ensure that HttpConfiguration.EnsureInitialized() is called in the application's startup code after all other initialization code.
        /// </summary>
        internal static string Object_NotYetInitialized
        {
            get { return GetString("Object_NotYetInitialized"); }
        }

        /// <summary>
        /// The object has not yet been initialized. Ensure that HttpConfiguration.EnsureInitialized() is called in the application's startup code after all other initialization code.
        /// </summary>
        internal static string FormatObject_NotYetInitialized()
        {
            return GetString("Object_NotYetInitialized");
        }

        /// <summary>
        /// Found more than one dynamic property container in type '{0}'. Each open type must have at most one dynamic property container.
        /// </summary>
        internal static string MoreThanOneDynamicPropertyContainerFound
        {
            get { return GetString("MoreThanOneDynamicPropertyContainerFound"); }
        }

        /// <summary>
        /// Found more than one dynamic property container in type '{0}'. Each open type must have at most one dynamic property container.
        /// </summary>
        internal static string FormatMoreThanOneDynamicPropertyContainerFound(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MoreThanOneDynamicPropertyContainerFound"), p0);
        }

        /// <summary>
        /// The name of dynamic property '{0}' was already used as the declared property name of open complex type '{1}'.
        /// </summary>
        internal static string DynamicPropertyNameAlreadyUsedAsDeclaredPropertyName
        {
            get { return GetString("DynamicPropertyNameAlreadyUsedAsDeclaredPropertyName"); }
        }

        /// <summary>
        /// The name of dynamic property '{0}' was already used as the declared property name of open complex type '{1}'.
        /// </summary>
        internal static string FormatDynamicPropertyNameAlreadyUsedAsDeclaredPropertyName(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DynamicPropertyNameAlreadyUsedAsDeclaredPropertyName"), p0, p1);
        }

        /// <summary>
        /// Duplicate dynamic property name '{0}' found in open type '{1}'. Each dynamic property name must be unique.
        /// </summary>
        internal static string DuplicateDynamicPropertyNameFound
        {
            get { return GetString("DuplicateDynamicPropertyNameFound"); }
        }

        /// <summary>
        /// Duplicate dynamic property name '{0}' found in open type '{1}'. Each dynamic property name must be unique.
        /// </summary>
        internal static string FormatDuplicateDynamicPropertyNameFound(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DuplicateDynamicPropertyNameFound"), p0, p1);
        }

        /// <summary>
        /// The dynamic dictionary property '{0}' of type '{1}' cannot be set. The dynamic property dictionary must have a setter.
        /// </summary>
        internal static string CannotSetDynamicPropertyDictionary
        {
            get { return GetString("CannotSetDynamicPropertyDictionary"); }
        }

        /// <summary>
        /// The dynamic dictionary property '{0}' of type '{1}' cannot be set. The dynamic property dictionary must have a setter.
        /// </summary>
        internal static string FormatCannotSetDynamicPropertyDictionary(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotSetDynamicPropertyDictionary"), p0, p1);
        }

        /// <summary>
        /// Type '{0}' is not supported as dynamic property annotation. Referenced property must be of type '{1}'.
        /// </summary>
        internal static string InvalidPropertyInfoForDynamicPropertyAnnotation
        {
            get { return GetString("InvalidPropertyInfoForDynamicPropertyAnnotation"); }
        }

        /// <summary>
        /// Type '{0}' is not supported as dynamic property annotation. Referenced property must be of type '{1}'.
        /// </summary>
        internal static string FormatInvalidPropertyInfoForDynamicPropertyAnnotation(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidPropertyInfoForDynamicPropertyAnnotation"), p0, p1);
        }

        /// <summary>
        /// Request URI '{0}' too short to contain OData path '{1}'.
        /// </summary>
        internal static string RequestUriTooShortForODataPath
        {
            get { return GetString("RequestUriTooShortForODataPath"); }
        }

        /// <summary>
        /// Request URI '{0}' too short to contain OData path '{1}'.
        /// </summary>
        internal static string FormatRequestUriTooShortForODataPath(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("RequestUriTooShortForODataPath"), p0, p1);
        }

        /// <summary>
        /// Request URI '{0}' does not contain OData path '{1}'.
        /// </summary>
        internal static string ODataPathNotFound
        {
            get { return GetString("ODataPathNotFound"); }
        }

        /// <summary>
        /// Request URI '{0}' does not contain OData path '{1}'.
        /// </summary>
        internal static string FormatODataPathNotFound(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ODataPathNotFound"), p0, p1);
        }

        /// <summary>
        /// The Id link builder for the entity set '{0}' returned null. An Id link is required for the OData-EntityId header.
        /// </summary>
        internal static string IdLinkNullForEntityIdHeader
        {
            get { return GetString("IdLinkNullForEntityIdHeader"); }
        }

        /// <summary>
        /// The Id link builder for the entity set '{0}' returned null. An Id link is required for the OData-EntityId header.
        /// </summary>
        internal static string FormatIdLinkNullForEntityIdHeader(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("IdLinkNullForEntityIdHeader"), p0);
        }

        /// <summary>
        /// The type '{0}' is a nested collection type. Nested collection types are not allowed.
        /// </summary>
        internal static string NestedCollectionsNotSupported
        {
            get { return GetString("NestedCollectionsNotSupported"); }
        }

        /// <summary>
        /// The type '{0}' is a nested collection type. Nested collection types are not allowed.
        /// </summary>
        internal static string FormatNestedCollectionsNotSupported(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NestedCollectionsNotSupported"), p0);
        }

        /// <summary>
        /// The dynamic property '{0}' with Edm type '{1}' cannot be serialized.
        /// </summary>
        internal static string DynamicPropertyCannotBeSerialized
        {
            get { return GetString("DynamicPropertyCannotBeSerialized"); }
        }

        /// <summary>
        /// The dynamic property '{0}' with Edm type '{1}' cannot be serialized.
        /// </summary>
        internal static string FormatDynamicPropertyCannotBeSerialized(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DynamicPropertyCannotBeSerialized"), p0, p1);
        }

        /// <summary>
        /// The type '{0}' of dynamic property '{1}' is not supported.
        /// </summary>
        internal static string TypeOfDynamicPropertyNotSupported
        {
            get { return GetString("TypeOfDynamicPropertyNotSupported"); }
        }

        /// <summary>
        /// The type '{0}' of dynamic property '{1}' is not supported.
        /// </summary>
        internal static string FormatTypeOfDynamicPropertyNotSupported(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TypeOfDynamicPropertyNotSupported"), p0, p1);
        }

        /// <summary>
        /// The entity type '{0}' cannot be configured as a complex type because the derived type '{1}' is already configured as an entity type.
        /// </summary>
        internal static string CannotReconfigEntityTypeAsComplexType
        {
            get { return GetString("CannotReconfigEntityTypeAsComplexType"); }
        }

        /// <summary>
        /// The entity type '{0}' cannot be configured as a complex type because the derived type '{1}' is already configured as an entity type.
        /// </summary>
        internal static string FormatCannotReconfigEntityTypeAsComplexType(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotReconfigEntityTypeAsComplexType"), p0, p1);
        }

        /// <summary>
        /// Cannot determine the Edm type for the CLR type '{0}' because the derived type '{1}' is configured as entity type and another derived type '{2}' is configured as complex type.
        /// </summary>
        internal static string CannotInferEdmType
        {
            get { return GetString("CannotInferEdmType"); }
        }

        /// <summary>
        /// Cannot determine the Edm type for the CLR type '{0}' because the derived type '{1}' is configured as entity type and another derived type '{2}' is configured as complex type.
        /// </summary>
        internal static string FormatCannotInferEdmType(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotInferEdmType"), p0, p1, p2);
        }

        /// <summary>
        /// The dependent property type '{0}' is not same as the principal property type '{1}. The dependent and principal properties must have must have same types in the same order.
        /// </summary>
        internal static string DependentAndPrincipalTypeNotMatch
        {
            get { return GetString("DependentAndPrincipalTypeNotMatch"); }
        }

        /// <summary>
        /// The dependent property type '{0}' is not same as the principal property type '{1}. The dependent and principal properties must have must have same types in the same order.
        /// </summary>
        internal static string FormatDependentAndPrincipalTypeNotMatch(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DependentAndPrincipalTypeNotMatch"), p0, p1);
        }

        /// <summary>
        /// The property type '{0}' of the referential constraint is not valid. The referential constraint property type must be primitive type.
        /// </summary>
        internal static string ReferentialConstraintPropertyTypeNotValid
        {
            get { return GetString("ReferentialConstraintPropertyTypeNotValid"); }
        }

        /// <summary>
        /// The property type '{0}' of the referential constraint is not valid. The referential constraint property type must be primitive type.
        /// </summary>
        internal static string FormatReferentialConstraintPropertyTypeNotValid(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ReferentialConstraintPropertyTypeNotValid"), p0);
        }

        /// <summary>
        /// Referential constraint for navigation property '{0}' on type '{1}' is not supported. Only required or optional navigation properties support referential constraint.
        /// </summary>
        internal static string ReferentialConstraintOnManyNavigationPropertyNotSupported
        {
            get { return GetString("ReferentialConstraintOnManyNavigationPropertyNotSupported"); }
        }

        /// <summary>
        /// Referential constraint for navigation property '{0}' on type '{1}' is not supported. Only required or optional navigation properties support referential constraint.
        /// </summary>
        internal static string FormatReferentialConstraintOnManyNavigationPropertyNotSupported(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ReferentialConstraintOnManyNavigationPropertyNotSupported"), p0, p1);
        }

        /// <summary>
        /// The '{0}' property '{1}' is already configured to have a relationship with '{2}' property '{3}' in the referential constraint.
        /// </summary>
        internal static string ReferentialConstraintAlreadyConfigured
        {
            get { return GetString("ReferentialConstraintAlreadyConfigured"); }
        }

        /// <summary>
        /// The '{0}' property '{1}' is already configured to have a relationship with '{2}' property '{3}' in the referential constraint.
        /// </summary>
        internal static string FormatReferentialConstraintAlreadyConfigured(object p0, object p1, object p2, object p3)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ReferentialConstraintAlreadyConfigured"), p0, p1, p2, p3);
        }

        /// <summary>
        /// The entity set or singleton '{0}' is based on type '{1}' that has no keys defined.
        /// </summary>
        internal static string NavigationSourceTypeHasNoKeys
        {
            get { return GetString("NavigationSourceTypeHasNoKeys"); }
        }

        /// <summary>
        /// The entity set or singleton '{0}' is based on type '{1}' that has no keys defined.
        /// </summary>
        internal static string FormatNavigationSourceTypeHasNoKeys(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NavigationSourceTypeHasNoKeys"), p0, p1);
        }

        /// <summary>
        /// The type '{0}' of the parameter '{1}' must be a collection.
        /// </summary>
        internal static string ParameterTypeIsNotCollection
        {
            get { return GetString("ParameterTypeIsNotCollection"); }
        }

        /// <summary>
        /// The type '{0}' of the parameter '{1}' must be a collection.
        /// </summary>
        internal static string FormatParameterTypeIsNotCollection(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ParameterTypeIsNotCollection"), p0, p1);
        }

        /// <summary>
        /// The Uri '{0}' in the parameter is invalid.
        /// </summary>
        internal static string EntityReferenceMustHasKeySegment
        {
            get { return GetString("EntityReferenceMustHasKeySegment"); }
        }

        /// <summary>
        /// The Uri '{0}' in the parameter is invalid.
        /// </summary>
        internal static string FormatEntityReferenceMustHasKeySegment(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EntityReferenceMustHasKeySegment"), p0);
        }

        /// <summary>
        /// The type '{0}' of the parameter '{1}' does not have an Add method. Consider using a collection type that does have an Add method - for example IList&lt;T&gt; or ICollection&lt;T&gt;.
        /// </summary>
        internal static string CollectionParameterShouldHaveAddMethod
        {
            get { return GetString("CollectionParameterShouldHaveAddMethod"); }
        }

        /// <summary>
        /// The type '{0}' of the parameter '{1}' does not have an Add method. Consider using a collection type that does have an Add method - for example IList&lt;T&gt; or ICollection&lt;T&gt;.
        /// </summary>
        internal static string FormatCollectionParameterShouldHaveAddMethod(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CollectionParameterShouldHaveAddMethod"), p0, p1);
        }

        /// <summary>
        /// The attribute routing template contains invalid segment '{0}'.
        /// </summary>
        internal static string InvalidAttributeRoutingTemplateSegment
        {
            get { return GetString("InvalidAttributeRoutingTemplateSegment"); }
        }

        /// <summary>
        /// The attribute routing template contains invalid segment '{0}'.
        /// </summary>
        internal static string FormatInvalidAttributeRoutingTemplateSegment(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("InvalidAttributeRoutingTemplateSegment"), p0);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
